#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 effective-4.1.50 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DHMediaPlay",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_CLASS("_TtC11DHMediaPlay6Camera")
@interface Camera : NSObject
/// 额外信息，由上层附加带入，组件不做处理修改
@property (nonatomic) id _Nullable extraInfo;
/// 时间戳
@property (nonatomic) NSInteger time;
/// 窗口序列号
@property (nonatomic) NSUInteger winIndex;
/// 解码方式：0软解， 1硬解。默认硬解，硬解失败组件会使用软解 由于组件内部问题 需要在播放回调成功之后设置 暂时由外部a按需要设置（setDecodeEngineType）
@property (nonatomic) NSInteger decodeEngine;
@property (nonatomic, copy) NSString * _Nullable requestId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// camera的操作信息，与windIndex一一对应
SWIFT_CLASS("_TtC11DHMediaPlay15CameraOperation")
@interface CameraOperation : NSObject
/// 是否已经停止了，这样换页的时候就不会再复播,指的是用户停止了该窗口
@property (nonatomic) BOOL isStoped;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay15CloudBaseCamera")
@interface CloudBaseCamera : Camera
/// m3u8地址  实时【必选】回放可选
@property (nonatomic, copy) NSString * _Nonnull m3uUrl;
/// 切片下载前缀 【可选】
@property (nonatomic, copy) NSString * _Nullable slicePrefix;
/// 起始播放时间 【必选】
@property (nonatomic) NSInteger startTime;
/// 下载超时时间 【必选】
@property (nonatomic) NSInteger timeout;
/// HLS协议类型 参考 E_HLS_TYPE
@property (nonatomic) NSInteger iProtoType;
/// 倍速播放 【可选】默认1
@property (nonatomic) NSInteger speed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class M3UExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay13CloudPBCamera")
@interface CloudPBCamera : CloudBaseCamera
/// 是否加密 【必选】默认false
@property (nonatomic) BOOL isEncrypt;
/// 加密的密码 【必选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// m3u拓展信息 【可选】
@property (nonatomic, strong) M3UExtInfo * _Nullable m3uExtInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay13CloudRTCamera")
@interface CloudRTCamera : CloudBaseCamera
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay22CommunityCloudRTCamera")
@interface CommunityCloudRTCamera : Camera
/// 服务token [必选]
@property (nonatomic, copy) NSString * _Nonnull dpRestToken;
/// 服务Ip [必选]
@property (nonatomic, copy) NSString * _Nonnull serverIP;
/// 设备用户名 [必选]
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 [必选]
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 服务端口 [必选]
@property (nonatomic) NSInteger serverPort;
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull communityCode;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// 设备类型 [必选]
@property (nonatomic) NSInteger deviceType;
/// 客户端版本号 [必选]
@property (nonatomic) NSInteger clientType;
/// 是否P2P : 0-否, 1-是 [必选]
@property (nonatomic) NSInteger isP2P;
/// 客户端Id [必选]
@property (nonatomic) NSInteger clientId;
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic) NSTimeInterval timeoffset;
/// 是否使用Https【可选】默认1 0:HTTP, 1:HTTPS
@property (nonatomic) NSInteger isUseHttps;
@property (nonatomic, copy) NSString * _Nonnull userAgent;
/// 传输模式,对应transport [可选] 0: CONN_OVER_TCP; 1: CONN_RTP_OVER_UDP; 2: CONN_P2P_OVER_UDP, 勿使用; 3: CONN_RTP_OVER_TCP; 4: CONN_DH_RTP_OVER_TCP
@property (nonatomic) NSInteger connType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RecordType : NSInteger;

/// 批量添加Camera基本模型
SWIFT_CLASS("_TtC11DHMediaPlay16DHCameraAddModel")
@interface DHCameraAddModel : NSObject
/// camera模型
@property (nonatomic, strong) Camera * _Nullable cameraModel;
/// 录像类型
@property (nonatomic) enum RecordType recordType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DHMediaLogLevel : NSInteger;
enum DHPlaySDKLogLevel : NSInteger;

SWIFT_CLASS("_TtC11DHMediaPlay13DHMediaConfig")
@interface DHMediaConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DHMediaConfig * _Nonnull shareInstance;)
+ (DHMediaConfig * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
/// 设置去噪模式等级 -1不进行噪声消除 0 噪声消除程度最低，对有用语音信号的损害最小 4 噪声消除程度最大，对有用语音信号的损害最大,默认-1不降噪
@property (nonatomic) NSInteger sEnhanceMode;
/// 日志等级设置
@property (nonatomic) enum DHMediaLogLevel logLevel;
/// playSDK日志等级设置
@property (nonatomic) enum DHPlaySDKLogLevel playSDKLogLevel;
/// 存储码流开关
@property (nonatomic) BOOL saveStream;
- (void)destroyThreadPool;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DHMediaLogLevel, closed) {
  DHMediaLogLevelFatal = 0,
  DHMediaLogLevelErr = 1,
  DHMediaLogLevelWarning = 2,
  DHMediaLogLevelInfo = 3,
  DHMediaLogLevelDebug = 4,
  DHMediaLogLevelAll = 5,
};

@class UIColor;
@class UIImage;
@class DHMediaPlayView;
@class DHPlayCell;

/// 关于UI的代理
SWIFT_PROTOCOL("_TtP11DHMediaPlay21DHMediaPlayUIDelegate_")
@protocol DHMediaPlayUIDelegate
@optional
- (UIColor * _Nonnull)playViewBorderNormalColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)playViewBorderSelectedColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)playViewBorderNormalWidthWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)playViewBorderSelectedWidthWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)playViewWindowNormalBGColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)playViewWindowSelectedBGColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewAddBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewReplayBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewRefreshBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewLockBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewLockDeviceBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (DHPlayCell * _Nonnull)playView:(DHMediaPlayView * _Nonnull)playView cellFor:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
@end

@protocol DHTalkListenerProtocol;
@protocol DHPlayListenerProtocol;
@protocol DHWindowListenerProtocol;
@protocol DHPTZListenerProtocol;
@class NSNumber;
@class DHRecordFileInfo;
@class NSCoder;

SWIFT_CLASS("_TtC11DHMediaPlay15DHMediaPlayView")
@interface DHMediaPlayView : UIView
/// UI属性的代理。一旦实现后就按实现中返回的参数展示选中颜色等，不实现时默认使用DHPlayConfig.default的值
@property (nonatomic, weak) id <DHMediaPlayUIDelegate> _Nullable UIDelegate;
/// 重新设置Cell的UI,执行UIDelegate或者DHPlayConfig的数据
- (void)resetCellUI;
/// 重新加载自定义按钮图片，用于图标的改变且会显示按钮
- (void)reloadPlayView;
/// 获取playCell
/// \param winIndex 窗口序列号
///
///
/// returns:
/// playCell 可空
- (DHPlayCell * _Nullable)dequeuePlayCellWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 是否在最大最小化的时候重置播放状态默认true
@property (nonatomic) BOOL resetPlayStatesWhenMaxOrMin;
/// 是否可以用垃圾桶移除camera 默认true
@property (nonatomic) BOOL canRemoveCameraByTrash;
/// 是否需要默认加页（当第一页所有窗口都有Camera时，开启翻页） 默认false
@property (nonatomic) BOOL needAutoAppendPage;
/// 每一页非最大化情况下的默认窗口个数，支持1、4、8、9、16，1时为单窗口，窗口保持最大化的 默认4
@property (nonatomic) NSUInteger defultSplitNumber;
/// 最多拥有的窗口数，请在初始化后设置
@property (nonatomic) NSUInteger maxWindowCount;
/// 当前所在页页码（0开始） 设置后可翻页，需要小于pageCount
@property (nonatomic) NSUInteger currentPage;
/// 当前页面总数 只读
@property (nonatomic, readonly) NSUInteger currentPageCount;
/// 窗口目前的分割数 只读
@property (nonatomic, readonly) NSUInteger currentSplitNumber;
/// 当前选中窗口的winIndex，不随位置变化改变，只读
@property (nonatomic) NSUInteger selectedWinIndex;
/// 设置pageControl 隐藏和显示
@property (nonatomic) BOOL hidePageCountView;
/// 添加对讲监听
/// \param listener 监听者
///
- (void)addTalkListener:(id <DHTalkListenerProtocol> _Nonnull)listener;
/// 移除对讲监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removeTalkListener:(id <DHTalkListenerProtocol> _Nonnull)listener;
/// 添加播放监听
/// \param listener 监听者
///
- (void)addPlayListener:(id <DHPlayListenerProtocol> _Nonnull)listener;
/// 移除播放监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removePlayListener:(id <DHPlayListenerProtocol> _Nonnull)listener;
/// 添加窗口动作监听
/// \param listener 监听者
///
- (void)addWindowListener:(id <DHWindowListenerProtocol> _Nonnull)listener;
/// 移除窗口动作监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removeWindowListener:(id <DHWindowListenerProtocol> _Nonnull)listener;
/// 添加PTZ动作监听
/// \param listener 监听者
///
- (void)addPTZListener:(id <DHPTZListenerProtocol> _Nonnull)listener;
/// 移除PTZ监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removePTZListener:(id <DHPTZListenerProtocol> _Nonnull)listener;
/// 获取对应窗口的Camera
/// \param winIndex 窗口序列号
///
///
/// returns:
/// Camera ，可空
- (Camera * _Nullable)getCamera:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (CameraOperation * _Nullable)getCameraOperation:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取playHandle
/// \param winIndex 窗口序号
///
///
/// returns:
/// playHandle
- (NSNumber * _Nonnull)getPlayHandle:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取loginHandle
/// \param winIndex 窗口序号
///
///
/// returns:
/// loginHandle
- (NSNumber * _Nonnull)getLoginHandle:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取所有窗口的Camera
///
/// returns:
/// Cameras,没有会返回一个空数组
- (NSArray<Camera *> * _Nonnull)getAllCamera SWIFT_WARN_UNUSED_RESULT;
/// 获取对应窗口位置
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 窗口位置序号，注意不再限制在一页之中，和winIndex一样都是0~15，表示绝对位置,超出会返回UInt.max
- (NSUInteger)getPosition:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 根据位置获取winIndex
/// \param position 位置
///
- (NSUInteger)getWinIndexBy:(NSUInteger)position SWIFT_WARN_UNUSED_RESULT;
/// 获取某一窗口的自定义view（透明），此View包含了窗口手势，不可修改手势
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 自定义view
- (UIView * _Nonnull)getCustomView:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开始对讲，默认对讲回调成功后就会开启双向声音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功true，失败false，不代表真实情况
- (BOOL)startTalk:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开始通道对讲，默认对讲回调成功后就会开启双向声音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功true，失败false，不代表真实情况
- (BOOL)startChannelTalk:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 结束对讲
/// \param winIndex 窗口序列号
///
- (void)stopTalk:(NSUInteger)winIndex;
/// 开启对讲采样，自己一方的声音
/// \param winIndex 窗口序列号
///
- (void)startSampleAudio:(NSUInteger)winIndex;
/// 关闭对讲采样
/// \param winIndex 窗口序列号
///
- (void)stopSampleAudio:(NSUInteger)winIndex;
/// 开启对讲声音
/// \param winIndex 窗口序列号
///
- (void)startTalkSound:(NSUInteger)winIndex;
- (void)setSpeakerAutoEnable:(BOOL)enable;
/// 关闭对讲声音
/// \param winIndex 窗口序列号
///
- (void)stopTalkSound:(NSUInteger)winIndex;
- (NSInteger)getRecvAudioCallBack SWIFT_WARN_UNUSED_RESULT;
/// 在某个窗口上添加camera信息
/// \param camera camera
///
/// \param winIndex 窗口序列号
///
/// \param recordType 录制类型MP4或DAV
///
- (void)addCamera:(Camera * _Nonnull)camera at:(NSUInteger)winIndex recordType:(enum RecordType)recordType;
/// 批量添加camera信息
/// \param camerasModelArray 窗口模型
///
- (void)addBatchCameras:(NSArray<DHCameraAddModel *> * _Nonnull)camerasModelArray;
/// 删除某个camera,同时会停止播放
/// \param winIndex 窗口序列号
///
- (void)removeCamera:(NSUInteger)winIndex;
/// 删除所有camera
- (void)removeAllCamera;
- (void)setDisPlayRegion:(NSUInteger)winIndex enable:(BOOL)enable;
/// 播放某个窗口，需要先addCamera
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否成功，不是真正的状态，仅仅判断camera信息是否正确
- (BOOL)play:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 全部播放，有camera的窗口都会播放
///
/// returns:
/// 是否成功，不是真正的状态，仅仅判断camera信息是否正确，一个成功都成功
- (BOOL)playAll SWIFT_WARN_UNUSED_RESULT;
/// 开始回放录像 带seek时间 DirectPBCamera
/// \param winIndex 窗口序列号
///
/// \param startTime seek的时间
///
///
/// returns:
/// 是否成功，不是真正的状态，仅仅判断camera信息是否正确
- (BOOL)playBackDirectSeek:(NSUInteger)winIndex time:(NSUInteger)startTime SWIFT_WARN_UNUSED_RESULT;
/// 设置加密密码，动态改变时需要
/// \param key 加密密码
///
/// \param winIndex 窗口序列号
///
- (void)setKey:(NSString * _Nonnull)key winIndex:(NSUInteger)winIndex;
/// 窗口是否在播放
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在播放
- (BOOL)isPlaying:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否在播放（真实的走了playBegan的回调）
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在播放（真实的走了playBegan的回调）
- (BOOL)isPlayBegin:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 是否对讲中
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否对讲中
- (BOOL)isTalking:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否加载中
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在加载，REQUESING或者SEEKING
- (BOOL)isLoading:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否在暂停中
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在暂停中
- (BOOL)isPaused:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取播放状态
/// \param winIndex 窗口序列号
///
- (NSInteger)getPlayerStatusSDKWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开启电子放大的能力，当窗口最大化的时候就可电子放大了
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnableElectricZoom:(NSUInteger)winIndex enable:(BOOL)enable;
/// 重置电子放大倍数
/// \param winIndex 窗口序列号
///
- (void)resetEZoomScale:(NSUInteger)winIndex;
/// 电子放大 忽略是否最大化
/// \param ignore 是否忽略
///
- (void)EZoomIgnoreMaxStateWithIgnore:(BOOL)ignore;
/// 是否正在电子放大
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否正在电子放大
- (BOOL)isEZooming:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否可见
/// \param winIndex winIndex
///
///
/// returns:
/// 是否可见
- (BOOL)cellIsVisible:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开启PTZ手势
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnablePtz:(NSUInteger)winIndex enable:(BOOL)enable;
/// 开启三维定位
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnable3DPosition:(NSUInteger)winIndex enable:(BOOL)enable;
/// 开启冻结拖动
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnableFreezeMode:(NSUInteger)winIndex enable:(BOOL)enable;
/// 设置按钮的隐藏
/// \param winIndex 窗口序列号
///
/// \param hidden 隐藏或显示
///
- (void)setAllBtnHidden:(NSUInteger)winIndex hidden:(BOOL)hidden;
/// 停止某个窗口
/// \param winIndex 窗口序列号
///
- (void)stop:(NSUInteger)winIndex;
/// 停止所有窗口的播放
- (void)stopAll;
/// 打开某个窗口的伴音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功与否
- (BOOL)openAudio:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 关闭某个窗口的伴音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功与否
- (BOOL)closeAudio:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 是否正在音频播放
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否正在电子放大
- (BOOL)isAudioOpened:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 判断共享链路的流媒体句柄是否存在
/// \param winIndex 窗口序号
///
///
/// returns:
/// 返回结果
- (BOOL)isOptHandleOKWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 鱼眼能力判断
/// \param winIndex 窗口号
///
///
/// returns:
/// 是否可以鱼眼
- (BOOL)fishEyeEnable:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开启或关闭鱼眼使能
/// \param winIndex 窗口号
///
/// \param enable 开启或关闭
///
- (void)setEnableFishEye:(NSUInteger)winIndex enable:(BOOL)enable;
/// 设置鱼眼模式
/// \param winIndex 窗口号
///
/// \param mainMountModel 安装模式
///
/// \param mainCalibrateModel 鱼眼模式
///
- (void)setOptFisheye:(NSUInteger)winIndex mainMountModel:(NSInteger)mainMountModel mainCalibrateModel:(NSInteger)mainCalibrateModel;
- (void)refshEyePointLineView;
- (BOOL)isFishEyeStream:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)startFishEye:(NSUInteger)winIndex x:(float)x y:(float)y SWIFT_WARN_UNUSED_RESULT;
- (void)doingFishEye:(NSUInteger)winIndex x:(float)x y:(float)y;
- (BOOL)endFishEye:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFishEyeOpen:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 进度条定位
/// \param winIndex 窗口号
///
/// \param time 时间，绝对时间
///
///
/// returns:
/// 是否成功，不是真实状态
- (BOOL)seek:(NSUInteger)winIndex by:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
/// 设定回放速度
/// \param speed 速度
///
/// \param winIndex 窗口号
///
- (void)setPlaySpeed:(float)speed at:(NSUInteger)winIndex;
/// 获取回放速度
/// \param winIndex 窗口号
///
- (float)getPlaySpeed:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 播放下一帧，单帧播放
/// \param winIndex 窗口号
///
- (void)playNextFrame:(NSUInteger)winIndex;
/// 播放连续帧
/// \param winIndex 窗口号
///
- (void)playContinuousFrame:(NSUInteger)winIndex;
/// 回放暂停
/// \param winIndex 窗口号
///
///
/// returns:
/// 是否成功，不代表真实状态
- (BOOL)pause:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 回放继续
/// \param winIndex 窗口号
///
///
/// returns:
/// 是否成功，不代表真实状态
- (BOOL)resume:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)playBackAddFileList:(NSUInteger)winIndex recordFileArray:(NSArray<DHRecordFileInfo *> * _Nonnull)recordFileArray SWIFT_WARN_UNUSED_RESULT;
/// 最大化窗口
/// \param winIndex 窗口序列号
///
/// \param animate 是否有动画
///
- (void)maximize:(NSUInteger)winIndex animate:(BOOL)animate;
/// 最小化窗口
/// \param animate 是否有动画
///
- (void)minimizeWithAnimate:(BOOL)animate;
/// 是否最大化了
@property (nonatomic, readonly) BOOL isMaximized;
- (void)setPlaysetViewProportionWithWidth:(NSUInteger)width height:(NSUInteger)height winIndex:(NSUInteger)winIndex;
/// 设置host与UserName，用于路径创建
/// \param host host
///
/// \param userName UserName
///
- (void)setHost:(NSString * _Nullable)host userName:(NSString * _Nullable)userName;
/// 对某一窗口抓图,有相机音
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图路径
///
///
/// returns:
/// 抓图存放路径，nil时表示抓图失败
- (NSString * _Nullable)snapshot:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath SWIFT_WARN_UNUSED_RESULT;
/// 对某一窗口抓图,没有相机音
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图路径
///
///
/// returns:
/// 抓图存放路径，nil时表示抓图失败
- (NSString * _Nullable)snapshotWithoutSuond:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath SWIFT_WARN_UNUSED_RESULT;
/// 开始录像，会抓一张图，再生成.dav或.mp4的录像文件（名称相同，后缀修改）
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图的路径，可不传默认返回一个,这个路径需要传jpg结尾的文件，作为抓图的路径
///
///
/// returns:
/// 抓图的路径,当返回nil时表示不成功
- (NSString * _Nullable)startRecord:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath SWIFT_WARN_UNUSED_RESULT;
/// 开始录像，会抓一张图，再生成.dav或.mp4的录像文件（名称相同，后缀修改）
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图的路径，可不传默认返回一个,这个路径需要传jpg结尾的文件，作为抓图的路径
///
///
/// returns:
/// 抓图的路径,当返回nil时表示不成功
- (NSString * _Nullable)startRecord:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath recordType:(enum RecordType)recordType SWIFT_WARN_UNUSED_RESULT;
/// 停止录像
/// \param winIndex 窗口序列号
///
- (void)stopRecord:(NSUInteger)winIndex;
/// 是否正在录像
/// \param winIndex 窗口号
///
///
/// returns:
/// Bool
- (BOOL)isRecording:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (void)setRealPlayPolicy:(NSInteger)realPlayPolicy playPolicy:(NSInteger)playPolicy waitTime:(NSInteger)waitTime winIndex:(NSUInteger)winIndex;
- (void)setDecodeEngineTypeWithDecodeType:(NSInteger)decodeType winIndex:(NSUInteger)winIndex;
- (void)showWaitProgress:(NSUInteger)winIndex;
- (void)showCenterBtn:(NSUInteger)winIndex;
- (void)showAddCameraBtn:(NSUInteger)winIndex;
- (void)showReplayBtn:(NSUInteger)winIndex;
- (void)showRefreshBtn:(NSUInteger)winIndex;
- (void)showLockBtn:(NSUInteger)winIndex;
- (void)showDeviceLockBtn:(NSUInteger)winIndex;
- (void)hideWaitProgress:(NSUInteger)winIndex;
- (void)hideAddCameraBtn:(NSUInteger)winIndex;
- (void)hideReplayBtn:(NSUInteger)winIndex;
- (void)hideRefreshBtn:(NSUInteger)winIndex;
- (void)hideLockBtn:(NSUInteger)winIndex;
- (void)swithWindowFrom:(NSUInteger)oldPosition to:(NSUInteger)newPosition;
- (void)setDefultSplitNumber:(NSUInteger)defultSplitNumber animate:(BOOL)animate;
- (void)setCenterBtnWidth:(NSInteger)width;
/// 初始化
/// \param frame frame
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// 初始化
/// \param aDecoder NSCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface DHMediaPlayView (SWIFT_EXTENSION(DHMediaPlay))
- (void)layoutSubviews;
@end





enum PtzOperation : NSInteger;

SWIFT_PROTOCOL("_TtP11DHMediaPlay21DHPTZListenerProtocol_")
@protocol DHPTZListenerProtocol <NSObject>
@optional
/// PTZ手势的回调，参照ptz业务接口，需要一个开始和结束的标记。
/// \param winIndex 窗口序列号
///
/// \param ptzType PTZ手势类型
///
/// \param stop 是否需要停止手势
///
- (void)onPTZControl:(NSUInteger)winIndex ptzType:(enum PtzOperation)ptzType stop:(BOOL)stop;
/// 三维定位手势的回调，xy组成点，z表示拉伸强度
/// \param winIndex 窗口序列号
///
/// \param x x
///
/// \param y y
///
/// \param z z
///
- (void)on3DPositionControl:(NSUInteger)winIndex x:(CGFloat)x y:(CGFloat)y z:(CGFloat)z;
- (void)on3DPositionControl:(NSUInteger)winIndex windowWidth:(CGFloat)windowWidth windowHeight:(CGFloat)windowHeight boxWidth:(CGFloat)boxWidth boxHeight:(CGFloat)boxHeight boxMidx:(CGFloat)boxMidx boxMidy:(CGFloat)boxMidy zoomOut:(BOOL)zoomOut;
@end

@class UIButton;
@class UIGestureRecognizer;

SWIFT_CLASS("_TtC11DHMediaPlay10DHPlayCell")
@interface DHPlayCell : UIView <UIGestureRecognizerDelegate>
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified customView;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified centerBtn;
/// 初始化, 统一使用这个方法创建
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)activityViewAnimateWithAnimate:(BOOL)animate;
- (void)layoutSubviews;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end



enum PageCountViewStyle : NSInteger;

SWIFT_CLASS("_TtC11DHMediaPlay12DHPlayConfig")
@interface DHPlayConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DHPlayConfig * _Nonnull shareInstance;)
+ (DHPlayConfig * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nonnull borderNormalColor;
@property (nonatomic, strong) UIColor * _Nonnull borderSelectedColor;
@property (nonatomic) CGFloat borderNormalWidth;
@property (nonatomic) CGFloat borderSelectedWidth;
@property (nonatomic, strong) UIColor * _Nonnull windowNormalBGColor;
@property (nonatomic, strong) UIColor * _Nonnull windowSelectedBGColor;
@property (nonatomic, strong) UIColor * _Nonnull trashViewBGColor;
@property (nonatomic, copy) NSString * _Nullable trashViewText;
@property (nonatomic, copy) NSString * _Nullable trashViewSelectText;
@property (nonatomic, strong) UIImage * _Nullable addBtnImage;
@property (nonatomic, strong) UIImage * _Nullable addBtnHighlightedImage;
@property (nonatomic, strong) UIImage * _Nullable replayBtnImage;
@property (nonatomic, strong) UIImage * _Nullable replayBtnHighlightedImage;
@property (nonatomic, strong) UIImage * _Nullable refreshBtnImage;
@property (nonatomic, strong) UIImage * _Nullable lockBtnImage;
@property (nonatomic, strong) UIImage * _Nullable deviceLockBtnImage;
@property (nonatomic) NSUInteger maxWindowCount;
@property (nonatomic) enum PageCountViewStyle pageCountViewStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum PlayStatusType : NSInteger;

/// 播放监听的协议
SWIFT_PROTOCOL("_TtP11DHMediaPlay22DHPlayListenerProtocol_")
@protocol DHPlayListenerProtocol <NSObject>
@optional
/// 播放状态回调
/// \param winIndex 窗口序列号
///
/// \param status 播放状态
///
/// \param code 状态码，供上层直接使用
///
- (void)onPlayeStatusCallback:(NSUInteger)winIndex status:(enum PlayStatusType)status code:(NSInteger)code;
- (void)onPlayeStatusCallback:(NSUInteger)winIndex status:(enum PlayStatusType)status codeStr:(NSString * _Nonnull)codeStr;
/// 播放成功回调，已经组帧完成
/// \param winIndex 窗口序列号
///
- (void)onPlayBegin:(NSUInteger)winIndex;
/// 播放结束，回放时才有
/// \param winIndex 窗口序列号
///
- (void)onPlayFinish:(NSUInteger)winIndex;
/// 码流速率的回调
/// \param winIndex 窗口序列号
///
/// \param bitrate 码流速率，单位B/s
///
- (void)onReceiveBitrate:(NSUInteger)winIndex bitrate:(NSInteger)bitrate;
/// 回放时间回调
/// \param winIndex 窗口序列号
///
/// \param time 回放时间（绝对时间单位秒）
///
- (void)onPlayTime:(NSUInteger)winIndex time:(NSInteger)time;
/// 录像文件时间信息回调
/// \param winIndex 窗口号
///
/// \param startTime 开始时间（绝对时间单位秒）
///
/// \param endTime 结束时间（绝对时间单位秒）
///
- (void)onFileTime:(NSUInteger)winIndex startTime:(NSInteger)startTime endTime:(NSInteger)endTime;
/// 某个窗口的伴音被打开或关闭的回调,同时只有一个伴音能被打开
/// \param winIndex 窗口号
///
/// \param open 开启或关闭
///
- (void)onAudio:(NSUInteger)winIndex open:(BOOL)open;
/// 某个窗口的录像被关闭的回调
/// \param winIndex 窗口号
///
- (void)onRecordStop:(NSUInteger)winIndex;
/// 重新播放某个窗口
/// \param winIndex 窗口号
///
- (void)onReplay:(NSUInteger)winIndex;
/// 暂停某个窗口
/// \param winIndex 窗口号
///
- (void)onPause:(NSUInteger)winIndex;
/// 恢复某个窗口
/// \param winIndex 窗口号
///
- (void)onResume:(NSUInteger)winIndex;
/// 停止播放某个窗口
/// \param winIndex 窗口号
///
- (void)onStop:(NSUInteger)winIndex;
/// 播放画面分辨率回调
/// \param width 宽
///
/// \param height 高
///
/// \param index 窗口序号
///
- (void)onResolutionChanged:(NSInteger)width height:(NSInteger)height index:(NSInteger)index;
/// 播放状态回调
/// \param winIndex 窗口index
///
/// \param status 播放状态json
///
- (void)onProgressStatus:(NSUInteger)winIndex status:(NSString * _Nonnull)status;
/// 播放流媒体回调
/// \param winIndex 窗口index
///
/// \param message 流媒体信息json
///
- (void)onStreamLogInfo:(NSUInteger)winIndex message:(NSString * _Nonnull)message;
@end

/// PLAYSDK log等级
/// 0,  unknown
/// 1,  fatal, when setting this level, (fatal) will output
/// 2,  error,when setting this level, (fatal,error) will output
/// 3,  warn, when setting this level, (fatal,error,warn) will output
/// 4,  info, when setting this level, (fatal,error,warn,info) will output
/// 5,  Trace, when setting this level, (fatal,error,warn,info,trace) will output
/// 6,  Debug, when setting this level, (fatal,error,warn,info,trace,debug) will output
typedef SWIFT_ENUM(NSInteger, DHPlaySDKLogLevel, closed) {
  DHPlaySDKLogLevelUnknow = 0,
  DHPlaySDKLogLevelFatal = 1,
  DHPlaySDKLogLevelErr = 2,
  DHPlaySDKLogLevelWarning = 3,
  DHPlaySDKLogLevelInfo = 4,
  DHPlaySDKLogLevelTrace = 5,
  DHPlaySDKLogLevelDebug = 6,
};


/// netsdk录像文件模型
SWIFT_CLASS("_TtC11DHMediaPlay16DHRecordFileInfo")
@interface DHRecordFileInfo : NSObject
/// 通道号
@property (nonatomic) NSInteger channelId;
/// 文件总帧数
@property (nonatomic) NSInteger frameNum;
/// 文件长度 Kbyte
@property (nonatomic) NSInteger size;
/// 磁盘号(区分网络录像和本地录像的类型,0－127表示本地录像,其中64表示光盘1,128表示网络录像)
@property (nonatomic) NSInteger driveNo;
/// 起始簇号
@property (nonatomic) NSInteger startCluster;
/// 录象文件类型  0：普通录象；1：报警录象；2：移动检测；3：卡号录象；4：图片, 5: 智能录像, 19: POS录像, 255:所有录像
@property (nonatomic) NSInteger recordFileType;
/// 0:普通录像 1:重要录像
@property (nonatomic) NSInteger importantReCId;
/// 文件定位索引(recordFileType==4<图片>时,importantRecID<<8 + hint ,组成图片定位索引
@property (nonatomic) NSInteger hint;
/// 0-主码流录像 1-辅码1流录像 2-辅码流2 3-辅码流
@property (nonatomic) NSInteger recType;
/// 文件名
@property (nonatomic, copy) NSString * _Nonnull fileName;
/// 开始时间
@property (nonatomic) NSInteger beginTime;
/// 结束时间
@property (nonatomic) NSInteger endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TalkResultType : NSInteger;

/// 对讲回调的协议
SWIFT_PROTOCOL("_TtP11DHMediaPlay22DHTalkListenerProtocol_")
@protocol DHTalkListenerProtocol <NSObject>
@optional
- (void)onProgressStatus:(NSString * _Nonnull)status;
- (void)onStreamLogInfo:(NSString * _Nonnull)message;
/// 对讲结果的回调
/// \param winIndex 窗口号
///
/// \param result 对讲结果, TalkResultType
///
/// \param code 真正的错误码
///
- (void)onTalkResult:(NSUInteger)winIndex result:(enum TalkResultType)result code:(NSInteger)code;
/// sip对讲的回调
/// \param winIndex 窗口号
///
/// \param result 对讲结果, TalkResultType
///
/// \param data 数据，AudioSessionId等
///
- (void)onSipTalkResult:(NSUInteger)winIndex result:(enum TalkResultType)result data:(NSString * _Nonnull)data;
@end

enum WinControlType : NSInteger;
enum PageChangeType : NSInteger;

/// 窗口动作监听的协议
SWIFT_PROTOCOL("_TtP11DHMediaPlay24DHWindowListenerProtocol_")
@protocol DHWindowListenerProtocol <NSObject>
@optional
/// 点击了window上某个按钮
/// \param winIndex 点击的窗口序列号
///
/// \param type 点击事件类型
///
- (void)onControlClick:(NSUInteger)winIndex type:(enum WinControlType)type;
/// 某两个Cell之间的位置互换了
/// \param moveWinIndex 移动的cell的WinIndex
///
/// \param desWinIndex 被替换的cell的WinIndex
///
/// \param oldPosition 移动前，被移动cell的Position
///
/// \param desPosition 移动后，被移动ell的Position
///
- (void)onSwapCellWithMoveWinIndex:(NSUInteger)moveWinIndex desWinIndex:(NSUInteger)desWinIndex oldPosition:(NSUInteger)oldPosition desPosition:(NSUInteger)desPosition;
/// 选中某个窗口的回调
/// \param newWinIndex 新选中的窗口序列号
///
/// \param oldWinIndex 原来选中的窗口序列号
///
- (void)onWindowSelectChangedWithNewWinIndex:(NSUInteger)newWinIndex oldWinIndex:(NSUInteger)oldWinIndex;
/// 窗口页面变化的回调
/// \param newPage 切换的新Page
///
/// \param oldPage 原来的Page
///
/// \param totalPages 切换后总共的页面数
///
/// \param type 切换类型，见PageChangeType
///
- (void)onPageChangeWithNewPage:(NSUInteger)newPage oldPage:(NSUInteger)oldPage totalPages:(NSUInteger)totalPages type:(enum PageChangeType)type;
/// 组件手动删除了某个camera
/// \param winIndex 窗口号
///
- (void)onRemoveCamera:(NSUInteger)winIndex;
/// 电子放大开启或关闭的回调
/// \param winIndex 窗口号
///
/// \param open 是否开启
///
- (void)onEZoom:(NSUInteger)winIndex open:(BOOL)open;
/// 双击的回调
/// \param winIndex 窗口号
///
- (void)onDoubleClick:(NSUInteger)winIndex;
/// 开启鱼眼后拖拽事件的回调
/// \param winIndex 窗口号
///
/// \param point 拖拽点位
///
- (void)fishEyeDragWithPoint:(NSUInteger)winIndex point:(CGPoint)point;
/// 鱼眼拖拽开始事件的回调
/// \param winIndex 窗口
///
/// \param point 拖拽点位
///
- (void)fishEyeDragBeginWithPoint:(NSUInteger)winIndex point:(CGPoint)point;
/// 鱼眼拖拽结束事件的回调
/// \param winIndex 窗口
///
- (void)fishEyeDragEnd:(NSUInteger)winIndex;
@end


/// DSS播放基础Camera
SWIFT_CLASS("_TtC11DHMediaPlay13DSSBaseCamera")
@interface DSSBaseCamera : Camera
/// dpsdk句柄 【可选】【2选1】DPSDK需要，默认0表示没有
@property (nonatomic) NSInteger dpHandle;
/// 云基线或Express服务token 【可选】【2选1】云基线或Express需要
@property (nonatomic, copy) NSString * _Nullable dpRestToken;
/// 新增authorization字段用于达尔文平台
@property (nonatomic, copy) NSString * _Nullable authorization;
/// 服务Ip
@property (nonatomic, copy) NSString * _Nullable server_ip;
/// 服务端口
@property (nonatomic) NSInteger server_port;
/// 通道ID
@property (nonatomic, copy) NSString * _Nullable cameraID;
/// 码流类型：1主码流，2子码流，3三码流，默认1
@property (nonatomic) NSInteger streamType;
/// 是否I帧加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// I帧加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 是否是云基线版本，【可选】默认false
@property (nonatomic) BOOL bCloudBase;
/// 是否是EVO达尔文版本，【可选】默认false
@property (nonatomic) BOOL bEVOBase;
/// 是否使用Https【可选】默认0
@property (nonatomic) NSInteger isUseHttps;
/// 是否使用Tls加密码流【可选】默认false
@property (nonatomic) BOOL isUseTls;
/// 是否支持RVSL重定向【可选】默认false
@property (nonatomic) BOOL isroute;
/// userId【可选】默认false, isroute为true时必选
@property (nonatomic, copy) NSString * _Nonnull userId;
/// regionId【可选】默认false, isroute为true时必选
@property (nonatomic, copy) NSString * _Nonnull regionId;
/// domainId【可选】默认false, isroute为true时必选
@property (nonatomic, copy) NSString * _Nonnull domainId;
/// 业务功能模块编码
@property (nonatomic, copy) NSString * _Nonnull xOperateCode;
/// 业务功能模块名称
@property (nonatomic, copy) NSString * _Nonnull xOperateName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DSSPBCameraArg;

/// DSS回放Camera
SWIFT_CLASS("_TtC11DHMediaPlay11DSSPBCamera")
@interface DSSPBCamera : DSSBaseCamera
/// 录像来源 0.All 1.Device 2.Platfrom 云基线或Express不可为0，默认2
@property (nonatomic) NSInteger recordSource;
/// 是否按时间回放 默认false
@property (nonatomic) BOOL isPlayBackByTime;
/// 是否倒放 默认false
@property (nonatomic) BOOL isBack;
/// 开始时间 绝对时间，单位秒默认0
@property (nonatomic) NSInteger beginTime;
/// 结束时间 绝对时间，单位秒默认0
@property (nonatomic) NSInteger endTime;
@property (nonatomic) NSInteger needBeginTime;
/// 文件列表数据【可选】当isPlayBackByTime== false时有效
@property (nonatomic, copy) NSArray<DSSPBCameraArg *> * _Nullable recordFilelist;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// DSS回放文件片段数据对象
SWIFT_CLASS("_TtC11DHMediaPlay14DSSPBCameraArg")
@interface DSSPBCameraArg : NSObject
/// 录像长度
@property (nonatomic) double filelen;
/// 录像名
@property (nonatomic, copy) NSString * _Nullable fileName;
/// 存储服务ID
@property (nonatomic) NSInteger ssID;
/// 磁盘ID
@property (nonatomic, copy) NSString * _Nullable diskID;
/// 文件句柄，默认0
@property (nonatomic) NSInteger fileHandler;
/// 开始时间 绝对时间，单位秒默认0
@property (nonatomic) NSTimeInterval beginTime;
/// 结束时间 绝对时间，单位秒默认0
@property (nonatomic) NSTimeInterval endTime;
/// 录像来源 1-all 2-device record 3-platform 默认3
@property (nonatomic) NSInteger recordSource;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// DSS实时Camera
SWIFT_CLASS("_TtC11DHMediaPlay11DSSRTCamera")
@interface DSSRTCamera : DSSBaseCamera
/// 媒体类型 1.video 2.audio 3.video and audio【可选】DPSDK需要,默认0表示未选择
@property (nonatomic) NSInteger mediaType;
/// 是否检查认证 【可选】DPSDK需要
@property (nonatomic) BOOL isCheckPermission;
/// 多画面预览从第几个通道开始，默认-1
@property (nonatomic) NSInteger startChannelIndex;
/// 多画面预览画面分割数，默认0
@property (nonatomic) NSInteger separateNum;
/// 流出荷载类型，默认601
@property (nonatomic, copy) NSString * _Nonnull trackID;
/// 设备编码 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceID;
/// 支持的码流类型
@property (nonatomic) NSInteger supportStreamType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay17SipTalkBaseCamera")
@interface SipTalkBaseCamera : Camera
@property (nonatomic) NSInteger callType;
@property (nonatomic, copy) NSString * _Nonnull serverIp;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nonnull localIp;
@property (nonatomic) NSInteger port;
@property (nonatomic) NSInteger vPort;
@property (nonatomic) NSInteger callId;
@property (nonatomic) NSInteger dlgId;
@property (nonatomic) NSInteger tId;
@property (nonatomic) NSInteger sampleRate;
@property (nonatomic) NSInteger sampleDepth;
@property (nonatomic) NSInteger encodeType;
@property (nonatomic) NSInteger packType;
@property (nonatomic) BOOL isCall;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay17RtpOUdpTalkCamera")
@interface RtpOUdpTalkCamera : SipTalkBaseCamera
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay19DSSRTPSIPTalkCamera")
@interface DSSRTPSIPTalkCamera : RtpOUdpTalkCamera
@property (nonatomic) NSInteger mediaType;
/// dpsdk句柄 【可选】【2选1】DPSDK需要，默认0表示没有
@property (nonatomic) NSInteger dpHandle;
/// 云基线或Express服务token 【可选】【2选1】云基线或Express需要
@property (nonatomic, copy) NSString * _Nullable dpRestToken;
/// 服务Ip
@property (nonatomic, copy) NSString * _Nullable server_ip;
/// 服务端口
@property (nonatomic) NSInteger server_port;
/// 通道ID
@property (nonatomic, copy) NSString * _Nullable cameraID;
/// 码流类型：1主码流，2子码流，3三码流，默认1
@property (nonatomic) NSInteger streamType;
/// 是否I帧加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// I帧加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 是否使用Https【可选】默认1
@property (nonatomic) NSInteger isUseHttps;
/// 设备编码 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceID;
/// 是否检查认证 【可选】DPSDK需要
@property (nonatomic) BOOL isCheckPermission;
/// 是否使用Tls加密码流【可选】默认false
@property (nonatomic) BOOL isUseTls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LoginExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay16DirectBaseCamera")
@interface DirectBaseCamera : Camera
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// netsdkk句柄，【可选】为空时携带loginExtInfo
@property (nonatomic, copy) NSString * _Nullable loginHandle;
/// loginExtInfo，【可选】
@property (nonatomic, strong) LoginExtInfo * _Nullable loginExtInfo;
/// 是否加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// 加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay14DirectPBCamera")
@interface DirectPBCamera : DirectBaseCamera
/// 开始时间【必选】
@property (nonatomic) NSInteger startTime;
/// 结束时间【必选】
@property (nonatomic) NSInteger endTime;
/// 录像类型 【必选】
@property (nonatomic) NSInteger recordType;
/// false:从recordFileList中读取文件，按文件回放 true:按时间回放
@property (nonatomic) BOOL isPlayBackByTime;
/// 按文件回放 需要传入文件片段
@property (nonatomic, copy) NSArray<DHRecordFileInfo *> * _Nonnull recordFileList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay14DirectRTCamera")
@interface DirectRTCamera : DirectBaseCamera
/// 和通道对讲 【可选】 默认false 默认进行设备对讲
@property (nonatomic) BOOL talkWithChannel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FISHEYE_CALIBRATMODE, closed) {
  FISHEYE_CALIBRATMODEINVALID = 0,
  FISHEYE_CALIBRATMODEOFF = 1,
  FISHEYE_CALIBRATMODEORIGINAL = 2,
  FISHEYE_CALIBRATMODEPANORAMA = 3,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_ONE_EPTZ = 4,
  FISHEYE_CALIBRATMODEDOUBLE_PANORAMA = 5,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_DOUBLE_PANORAMA = 6,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_THREE_EPTZ_REGION = 7,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_THREE_EPTZ_REGION = 8,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_TWO_EPTZ_REGION = 9,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_FOUR_EPTZ_REGION = 10,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_FOUR_EPTZ_REGION = 11,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_SIX_EPTZ_REGION = 12,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_EIGHT_EPTZ_REGION = 13,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_EIGHT_EPTZ_REGION = 14,
  FISHEYE_CALIBRATMODETWO_EPTZ_REGION_WITH_ORIGINAL = 15,
  FISHEYE_CALIBRATMODEFOUR_EPTZ_REGION_WITH_ORIGINAL = 16,
  FISHEYE_CALIBRATMODEDOUBLE_PANORAMA_WITH_ORIGINAL = 17,
  FISHEYE_CALIBRATMODEFOUR_EPTZ_REGION_WITH_PANORAMA = 18,
  FISHEYE_CALIBRATMODETWO_EPTZ_REGION = 19,
  FISHEYE_CALIBRATMODESINGLE = 20,
  FISHEYE_CALIBRATMODEFOUR_EPTZ_REGION = 21,
  FISHEYE_CALIBRATMODEUSER_DEFINED = 22,
  FISHEYE_CALIBRATMODEPHONE = 23,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_ONE_EPTZ_REGION = 24,
  FISHEYE_CALIBRATMODEONE_EPTZ_REGION = 25,
  FISHEYE_CALIBRATMODENUM = 26,
};

typedef SWIFT_ENUM(NSInteger, FISHEYE_MOUNTMODE, closed) {
  FISHEYE_MOUNTMODEINVALID = 0,
  FISHEYE_MOUNTMODECEIL = 1,
  FISHEYE_MOUNTMODEWALL = 2,
  FISHEYE_MOUNTMODEFLOOR = 3,
  FISHEYE_MOUNTMODENUM = 4,
};

typedef SWIFT_ENUM(NSInteger, FISHEYE_winType, closed) {
  FISHEYE_winTypeCricle = 0,
  FISHEYE_winTypePanorama = 1,
  FISHEYE_winTypeSubWindow = 2,
};


/// 本地文件播放
SWIFT_CLASS("_TtC11DHMediaPlay10FileCamera")
@interface FileCamera : Camera
@property (nonatomic, copy) NSString * _Nullable filePath;
/// 文件类型 参考 E_MEDIA_FORMAT,默认MEDIA_DAV
@property (nonatomic) NSInteger fileType;
/// 是否加密 【可选】默认NO
@property (nonatomic) BOOL isEncrypt;
/// 加密密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HttpExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay14HttpBaseCamera")
@interface HttpBaseCamera : Camera
/// 私有播放地址
@property (nonatomic, copy) NSString * _Nonnull httpURL;
/// 是否加密
@property (nonatomic) BOOL isEncrypt;
/// 加密秘钥
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 设备用户名 【必选】
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 【必选】
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 共享链路模式【必选】
@property (nonatomic) NSInteger sharedLinkMode;
/// 共享链路句柄【可选】
@property (nonatomic, copy) NSString * _Nonnull handleKey;
/// 是否开启环回认证【可选】
@property (nonatomic) NSInteger isAuth;
/// 是否开启tls【可选】
@property (nonatomic) BOOL isTls;
/// 是否抛出鉴权失败错误码
@property (nonatomic) BOOL isThrowP2PAuthErr;
/// httpExtInfo拓展信息 【可选】
@property (nonatomic, strong) HttpExtInfo * _Nullable httpExtInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay11HttpExtInfo")
@interface HttpExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// 是否强制MTS 【必选】
@property (nonatomic) BOOL isForceMts;
/// 是否使用决策服务 【必选】
@property (nonatomic) BOOL isUseRep;
/// 开始时间 绝对时间，单位秒默认0【可选】
@property (nonatomic) NSInteger beginTime;
/// 结束时间 绝对时间，单位秒默认0【可选】
@property (nonatomic) NSInteger endTime;
/// 录像文件名（携带路径）【可选】
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// 码流类型 【必选】
@property (nonatomic) NSInteger subtype;
/// 对讲设备级”device” 或者 通道级”channel”
@property (nonatomic, copy) NSString * _Nonnull deviceType;
/// 普通对讲”talk” 呼叫对讲”call”
@property (nonatomic, copy) NSString * _Nonnull talkType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay12HttpPBCamera")
@interface HttpPBCamera : HttpBaseCamera
/// 相对录像开始时间的偏移秒数【必选】
@property (nonatomic) NSInteger offsetTime;
/// 是否倒放【可选】
@property (nonatomic) BOOL isReverse;
/// 倍数播放【可选】
@property (nonatomic) NSInteger speed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 私有协议Http
SWIFT_CLASS("_TtC11DHMediaPlay12HttpRTCamera")
@interface HttpRTCamera : HttpBaseCamera
/// 是否具有Http协议对讲能力
@property (nonatomic) BOOL talkHttpAblitily;
/// 对讲共享链路模式【必选】
@property (nonatomic) NSInteger talkSharedLinkMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 乐橙播放基础Camera
SWIFT_CLASS("_TtC11DHMediaPlay12LCBaseCamera")
@interface LCBaseCamera : Camera
@property (nonatomic, copy) NSString * _Nullable accessTok;
@property (nonatomic, copy) NSString * _Nullable psk;
@property (nonatomic, copy) NSString * _Nullable deviceID;
@property (nonatomic) NSInteger channelNo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LCPBCameraArg;

/// 乐橙回放Camera
SWIFT_CLASS("_TtC11DHMediaPlay10LCPBCamera")
@interface LCPBCamera : LCBaseCamera
@property (nonatomic) NSInteger beginTime;
@property (nonatomic) NSInteger endTime;
@property (nonatomic) BOOL isByFile;
@property (nonatomic) BOOL isCloud;
@property (nonatomic, copy) NSArray<LCPBCameraArg *> * _Nullable recordFilelist;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 乐橙回放文件片段数据对象
SWIFT_CLASS("_TtC11DHMediaPlay13LCPBCameraArg")
@interface LCPBCameraArg : NSObject
@property (nonatomic) NSInteger beginTime;
@property (nonatomic) NSInteger endTime;
@property (nonatomic, copy) NSString * _Nullable recordId;
@property (nonatomic) NSInteger recordType;
@property (nonatomic, copy) NSString * _Nullable deviceId;
@property (nonatomic) NSInteger channelNo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 乐橙实时Camera
SWIFT_CLASS("_TtC11DHMediaPlay10LCRTCamera")
@interface LCRTCamera : LCBaseCamera
@property (nonatomic) NSInteger streamType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 额外信息
SWIFT_CLASS("_TtC11DHMediaPlay12LoginExtInfo")
@interface LoginExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 设备用户名 【必选】
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 【必选】
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 登录端口 【必选】 默认37777
@property (nonatomic) NSInteger port;
/// 直连方式下设备IP字段 【可选】
@property (nonatomic, copy) NSString * _Nonnull IP;
/// 设备类型 0：大华p2p 1：乐橙设备 2：IP方式登录，此时IP必须携带 默认0
@property (nonatomic) NSInteger deviceType;
/// 是否转发(NETSDK)
@property (nonatomic) BOOL isTcpReLay;
/// 是否走策略登陆
@property (nonatomic) NSInteger mLoginType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay10M3UExtInfo")
@interface M3UExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 云录像ID 【必选】
@property (nonatomic, copy) NSString * _Nonnull recordId;
/// 云录像类型 【必选】参考 E_CLOUD_RECORD_TYPE
@property (nonatomic, copy) NSString * _Nonnull recordType;
/// 录像文件路径 【必选】
@property (nonatomic, copy) NSString * _Nonnull recordPath;
/// 区域 【必选】
@property (nonatomic, copy) NSString * _Nonnull region;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 页面转换事件类型
/// <ul>
///   <li>
///     maximize: 最大化窗口
///   </li>
///   <li>
///     minimize: 最小化窗口
///   </li>
///   <li>
///     scroll: 滚动窗口
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PageChangeType, closed) {
  PageChangeTypeMaximize = 0,
  PageChangeTypeMinimize = 1,
  PageChangeTypeScroll = 2,
};

typedef SWIFT_ENUM(NSInteger, PageCountViewStyle, closed) {
  PageCountViewStylePageControlAndLabel = 0,
  PageCountViewStyleLabel = 1,
};

/// 播放的状态
/// <ul>
///   <li>
///     eUnknow: 未知
///   </li>
///   <li>
///     ePlayFirstFrame: 获取到第一帧数据,可去显示播放画面了
///   </li>
///   <li>
///     ePlayEnd: 视频播放结束
///   </li>
///   <li>
///     eNetworkaAbort: 网络异常
///   </li>
///   <li>
///     ePlayFailed: 播放异常，检查播放视频数据错误
///   </li>
///   <li>
///     eBadFile: 异常文件，不支持的文件格式
///   </li>
///   <li>
///     eSeekFailed: 拖拽失败
///   </li>
///   <li>
///     eSeekSuccess: 拖拽成功
///   </li>
///   <li>
///     eSeekCrossBorder: 拖拽越界
///   </li>
///   <li>
///     ePlayDataOver: 所有文件播放结束，录像相关
///   </li>
///   <li>
///     ePlayNoAuthority: 没有权限
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PlayStatusType, closed) {
  PlayStatusTypeEUnknow = 0,
  PlayStatusTypeEPlayFirstFrame = 1,
  PlayStatusTypeEPlayEnd = 2,
  PlayStatusTypeENetworkaAbort = 3,
  PlayStatusTypeEPlayFailed = 4,
  PlayStatusTypeEBadFile = 5,
  PlayStatusTypeESeekFailed = 6,
  PlayStatusTypeESeekSuccess = 7,
  PlayStatusTypeESeekCrossBorder = 8,
  PlayStatusTypeEPlayDataOver = 9,
  PlayStatusTypeEPlayNoAuthority = 10,
};

/// Ptz操作方向
/// <ul>
///   <li>
///     begin: 开始
///   </li>
///   <li>
///     end: 结束
///   </li>
///   <li>
///     zoomIn: 放大
///   </li>
///   <li>
///     zoomOut: 缩小
///   </li>
///   <li>
///     zoomEnd: 放大结束
///   </li>
///   <li>
///     directionLeft: 左
///   </li>
///   <li>
///     directionRight: 右
///   </li>
///   <li>
///     directionUp: 上
///   </li>
///   <li>
///     directionDown: 下
///   </li>
///   <li>
///     directionLeftUp: 左上
///   </li>
///   <li>
///     directionLeftDown: 左上
///   </li>
///   <li>
///     directionRightUp: 右上
///   </li>
///   <li>
///     directionRightDown: 右下
///   </li>
///   <li>
///     directionEnd: 方向结束
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PtzOperation, closed) {
  PtzOperationBegin = 0,
  PtzOperationZoomIn = 1,
  PtzOperationZoomOut = 2,
  PtzOperationDirectionLeft = 3,
  PtzOperationDirectionRight = 4,
  PtzOperationDirectionUp = 5,
  PtzOperationDirectionDown = 6,
  PtzOperationDirectionLeftUp = 7,
  PtzOperationDirectionLeftDown = 8,
  PtzOperationDirectionRightUp = 9,
  PtzOperationDirectionRightDown = 10,
};

@class RTSPExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay14RTSPBaseCamera")
@interface RTSPBaseCamera : Camera
/// RTSP播放地址 【可选】空时需要携带rtspExtInfo拓展信息
@property (nonatomic, copy) NSString * _Nullable rtspURL;
/// 是否I帧加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// I帧加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 设备用户名 【必选】
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 【必选】
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 是否抛出鉴权失败错误码
@property (nonatomic) BOOL isThrowP2PAuthErr;
/// rtspExtInfo拓展信息 【可选】
@property (nonatomic, strong) RTSPExtInfo * _Nullable rtspExtInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay11RTSPExtInfo")
@interface RTSPExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// 是否使用决策服务 【可选】默认false
@property (nonatomic) BOOL isUseRep;
/// 是否强制MTS 【可选】默认false
@property (nonatomic) BOOL isForceMts;
/// 是否开启优化拉流 【可选】默认false
@property (nonatomic) BOOL isOpt;
/// 开始时间，UNIX时间戳 【可选】 默认0
@property (nonatomic) NSInteger beginTime;
/// 结束时间，UNIX时间戳 【可选】 默认0
@property (nonatomic) NSInteger endTime;
/// 录像文件名（携带路径）【可选】
@property (nonatomic, copy) NSString * _Nullable fileId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger talkSubType;
/// 对讲通道号
@property (nonatomic) NSInteger talkChannelId;
/// 对讲设备级”device” 或者 通道级”channel”
@property (nonatomic, copy) NSString * _Nonnull talkDeviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay12RTSPPBCamera")
@interface RTSPPBCamera : RTSPBaseCamera
/// 相对录像开始时间的偏移秒数 【必选】默认0
@property (nonatomic) NSInteger offsetTime;
/// 是否倒放 【可选】默认false
@property (nonatomic) BOOL isReverse;
/// 倍速播放 【可选】默认1
@property (nonatomic) NSInteger speed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay12RTSPRTCamera")
@interface RTSPRTCamera : RTSPBaseCamera
///
@property (nonatomic, copy) NSString * _Nullable userAgent;
///
@property (nonatomic) NSInteger connType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 设备生产商，用于在录像时进行区别
/// <ul>
///   <li>
///     unknow: 未知
///   </li>
///   <li>
///     dahua: 大华
///   </li>
///   <li>
///     hik: 海康
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, RecordType, closed) {
  RecordTypeUnknow = 0,
  RecordTypeMp4 = 1,
  RecordTypeDav = 2,
};



SWIFT_CLASS("_TtC11DHMediaPlay15SipStreamCamera")
@interface SipStreamCamera : SipTalkBaseCamera
@property (nonatomic) NSInteger dpHandle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 对讲结果
/// <ul>
///   <li>
///     eTalkFailed: 对讲失败
///   </li>
///   <li>
///     eTalkSuccess: 对讲成功
///   </li>
///   <li>
///     eTalkAudioSessionId: 音频SessionId
///   </li>
///   <li>
///     eTalkAudioPort: 音频port
///   </li>
///   <li>
///     eTalkVideoSessionId: 视频SessionId
///   </li>
///   <li>
///     eTalkVideoPort: 视频port
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, TalkResultType, closed) {
  TalkResultTypeETalkFailed = 0,
  TalkResultTypeETalkSuccess = 1,
  TalkResultTypeETalkAudioSessionId = 2,
  TalkResultTypeETalkAudioPort = 3,
  TalkResultTypeETalkVideoSessionId = 4,
  TalkResultTypeETalkVideoPort = 5,
};

/// 窗口按钮点击事件类型
/// <ul>
///   <li>
///     add: 点击加号添加事件
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, WinControlType, closed) {
  WinControlTypeAdd = 0,
  WinControlTypeRefresh = 1,
  WinControlTypeReplay = 2,
  WinControlTypeLock = 3,
  WinControlTypeDeviceLock = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 effective-4.1.50 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="DHMediaPlay",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif




SWIFT_CLASS("_TtC11DHMediaPlay6Camera")
@interface Camera : NSObject
/// 额外信息，由上层附加带入，组件不做处理修改
@property (nonatomic) id _Nullable extraInfo;
/// 时间戳
@property (nonatomic) NSInteger time;
/// 窗口序列号
@property (nonatomic) NSUInteger winIndex;
/// 解码方式：0软解， 1硬解。默认硬解，硬解失败组件会使用软解 由于组件内部问题 需要在播放回调成功之后设置 暂时由外部a按需要设置（setDecodeEngineType）
@property (nonatomic) NSInteger decodeEngine;
@property (nonatomic, copy) NSString * _Nullable requestId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// camera的操作信息，与windIndex一一对应
SWIFT_CLASS("_TtC11DHMediaPlay15CameraOperation")
@interface CameraOperation : NSObject
/// 是否已经停止了，这样换页的时候就不会再复播,指的是用户停止了该窗口
@property (nonatomic) BOOL isStoped;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay15CloudBaseCamera")
@interface CloudBaseCamera : Camera
/// m3u8地址  实时【必选】回放可选
@property (nonatomic, copy) NSString * _Nonnull m3uUrl;
/// 切片下载前缀 【可选】
@property (nonatomic, copy) NSString * _Nullable slicePrefix;
/// 起始播放时间 【必选】
@property (nonatomic) NSInteger startTime;
/// 下载超时时间 【必选】
@property (nonatomic) NSInteger timeout;
/// HLS协议类型 参考 E_HLS_TYPE
@property (nonatomic) NSInteger iProtoType;
/// 倍速播放 【可选】默认1
@property (nonatomic) NSInteger speed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class M3UExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay13CloudPBCamera")
@interface CloudPBCamera : CloudBaseCamera
/// 是否加密 【必选】默认false
@property (nonatomic) BOOL isEncrypt;
/// 加密的密码 【必选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// m3u拓展信息 【可选】
@property (nonatomic, strong) M3UExtInfo * _Nullable m3uExtInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay13CloudRTCamera")
@interface CloudRTCamera : CloudBaseCamera
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay22CommunityCloudRTCamera")
@interface CommunityCloudRTCamera : Camera
/// 服务token [必选]
@property (nonatomic, copy) NSString * _Nonnull dpRestToken;
/// 服务Ip [必选]
@property (nonatomic, copy) NSString * _Nonnull serverIP;
/// 设备用户名 [必选]
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 [必选]
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 服务端口 [必选]
@property (nonatomic) NSInteger serverPort;
@property (nonatomic, copy) NSString * _Nonnull channelId;
@property (nonatomic, copy) NSString * _Nonnull communityCode;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// 设备类型 [必选]
@property (nonatomic) NSInteger deviceType;
/// 客户端版本号 [必选]
@property (nonatomic) NSInteger clientType;
/// 是否P2P : 0-否, 1-是 [必选]
@property (nonatomic) NSInteger isP2P;
/// 客户端Id [必选]
@property (nonatomic) NSInteger clientId;
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic) NSTimeInterval timeoffset;
/// 是否使用Https【可选】默认1 0:HTTP, 1:HTTPS
@property (nonatomic) NSInteger isUseHttps;
@property (nonatomic, copy) NSString * _Nonnull userAgent;
/// 传输模式,对应transport [可选] 0: CONN_OVER_TCP; 1: CONN_RTP_OVER_UDP; 2: CONN_P2P_OVER_UDP, 勿使用; 3: CONN_RTP_OVER_TCP; 4: CONN_DH_RTP_OVER_TCP
@property (nonatomic) NSInteger connType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum RecordType : NSInteger;

/// 批量添加Camera基本模型
SWIFT_CLASS("_TtC11DHMediaPlay16DHCameraAddModel")
@interface DHCameraAddModel : NSObject
/// camera模型
@property (nonatomic, strong) Camera * _Nullable cameraModel;
/// 录像类型
@property (nonatomic) enum RecordType recordType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum DHMediaLogLevel : NSInteger;
enum DHPlaySDKLogLevel : NSInteger;

SWIFT_CLASS("_TtC11DHMediaPlay13DHMediaConfig")
@interface DHMediaConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DHMediaConfig * _Nonnull shareInstance;)
+ (DHMediaConfig * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
/// 设置去噪模式等级 -1不进行噪声消除 0 噪声消除程度最低，对有用语音信号的损害最小 4 噪声消除程度最大，对有用语音信号的损害最大,默认-1不降噪
@property (nonatomic) NSInteger sEnhanceMode;
/// 日志等级设置
@property (nonatomic) enum DHMediaLogLevel logLevel;
/// playSDK日志等级设置
@property (nonatomic) enum DHPlaySDKLogLevel playSDKLogLevel;
/// 存储码流开关
@property (nonatomic) BOOL saveStream;
- (void)destroyThreadPool;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DHMediaLogLevel, closed) {
  DHMediaLogLevelFatal = 0,
  DHMediaLogLevelErr = 1,
  DHMediaLogLevelWarning = 2,
  DHMediaLogLevelInfo = 3,
  DHMediaLogLevelDebug = 4,
  DHMediaLogLevelAll = 5,
};

@class UIColor;
@class UIImage;
@class DHMediaPlayView;
@class DHPlayCell;

/// 关于UI的代理
SWIFT_PROTOCOL("_TtP11DHMediaPlay21DHMediaPlayUIDelegate_")
@protocol DHMediaPlayUIDelegate
@optional
- (UIColor * _Nonnull)playViewBorderNormalColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)playViewBorderSelectedColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)playViewBorderNormalWidthWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)playViewBorderSelectedWidthWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)playViewWindowNormalBGColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)playViewWindowSelectedBGColorWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewAddBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewReplayBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewRefreshBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewLockBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)playViewLockDeviceBtnImageWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (DHPlayCell * _Nonnull)playView:(DHMediaPlayView * _Nonnull)playView cellFor:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
@end

@protocol DHTalkListenerProtocol;
@protocol DHPlayListenerProtocol;
@protocol DHWindowListenerProtocol;
@protocol DHPTZListenerProtocol;
@class NSNumber;
@class DHRecordFileInfo;
@class NSCoder;

SWIFT_CLASS("_TtC11DHMediaPlay15DHMediaPlayView")
@interface DHMediaPlayView : UIView
/// UI属性的代理。一旦实现后就按实现中返回的参数展示选中颜色等，不实现时默认使用DHPlayConfig.default的值
@property (nonatomic, weak) id <DHMediaPlayUIDelegate> _Nullable UIDelegate;
/// 重新设置Cell的UI,执行UIDelegate或者DHPlayConfig的数据
- (void)resetCellUI;
/// 重新加载自定义按钮图片，用于图标的改变且会显示按钮
- (void)reloadPlayView;
/// 获取playCell
/// \param winIndex 窗口序列号
///
///
/// returns:
/// playCell 可空
- (DHPlayCell * _Nullable)dequeuePlayCellWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 是否在最大最小化的时候重置播放状态默认true
@property (nonatomic) BOOL resetPlayStatesWhenMaxOrMin;
/// 是否可以用垃圾桶移除camera 默认true
@property (nonatomic) BOOL canRemoveCameraByTrash;
/// 是否需要默认加页（当第一页所有窗口都有Camera时，开启翻页） 默认false
@property (nonatomic) BOOL needAutoAppendPage;
/// 每一页非最大化情况下的默认窗口个数，支持1、4、8、9、16，1时为单窗口，窗口保持最大化的 默认4
@property (nonatomic) NSUInteger defultSplitNumber;
/// 最多拥有的窗口数，请在初始化后设置
@property (nonatomic) NSUInteger maxWindowCount;
/// 当前所在页页码（0开始） 设置后可翻页，需要小于pageCount
@property (nonatomic) NSUInteger currentPage;
/// 当前页面总数 只读
@property (nonatomic, readonly) NSUInteger currentPageCount;
/// 窗口目前的分割数 只读
@property (nonatomic, readonly) NSUInteger currentSplitNumber;
/// 当前选中窗口的winIndex，不随位置变化改变，只读
@property (nonatomic) NSUInteger selectedWinIndex;
/// 设置pageControl 隐藏和显示
@property (nonatomic) BOOL hidePageCountView;
/// 添加对讲监听
/// \param listener 监听者
///
- (void)addTalkListener:(id <DHTalkListenerProtocol> _Nonnull)listener;
/// 移除对讲监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removeTalkListener:(id <DHTalkListenerProtocol> _Nonnull)listener;
/// 添加播放监听
/// \param listener 监听者
///
- (void)addPlayListener:(id <DHPlayListenerProtocol> _Nonnull)listener;
/// 移除播放监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removePlayListener:(id <DHPlayListenerProtocol> _Nonnull)listener;
/// 添加窗口动作监听
/// \param listener 监听者
///
- (void)addWindowListener:(id <DHWindowListenerProtocol> _Nonnull)listener;
/// 移除窗口动作监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removeWindowListener:(id <DHWindowListenerProtocol> _Nonnull)listener;
/// 添加PTZ动作监听
/// \param listener 监听者
///
- (void)addPTZListener:(id <DHPTZListenerProtocol> _Nonnull)listener;
/// 移除PTZ监听，建议在控制器销毁前移除
/// \param listener 监听者
///
- (void)removePTZListener:(id <DHPTZListenerProtocol> _Nonnull)listener;
/// 获取对应窗口的Camera
/// \param winIndex 窗口序列号
///
///
/// returns:
/// Camera ，可空
- (Camera * _Nullable)getCamera:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (CameraOperation * _Nullable)getCameraOperation:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取playHandle
/// \param winIndex 窗口序号
///
///
/// returns:
/// playHandle
- (NSNumber * _Nonnull)getPlayHandle:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取loginHandle
/// \param winIndex 窗口序号
///
///
/// returns:
/// loginHandle
- (NSNumber * _Nonnull)getLoginHandle:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取所有窗口的Camera
///
/// returns:
/// Cameras,没有会返回一个空数组
- (NSArray<Camera *> * _Nonnull)getAllCamera SWIFT_WARN_UNUSED_RESULT;
/// 获取对应窗口位置
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 窗口位置序号，注意不再限制在一页之中，和winIndex一样都是0~15，表示绝对位置,超出会返回UInt.max
- (NSUInteger)getPosition:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 根据位置获取winIndex
/// \param position 位置
///
- (NSUInteger)getWinIndexBy:(NSUInteger)position SWIFT_WARN_UNUSED_RESULT;
/// 获取某一窗口的自定义view（透明），此View包含了窗口手势，不可修改手势
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 自定义view
- (UIView * _Nonnull)getCustomView:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开始对讲，默认对讲回调成功后就会开启双向声音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功true，失败false，不代表真实情况
- (BOOL)startTalk:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开始通道对讲，默认对讲回调成功后就会开启双向声音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功true，失败false，不代表真实情况
- (BOOL)startChannelTalk:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 结束对讲
/// \param winIndex 窗口序列号
///
- (void)stopTalk:(NSUInteger)winIndex;
/// 开启对讲采样，自己一方的声音
/// \param winIndex 窗口序列号
///
- (void)startSampleAudio:(NSUInteger)winIndex;
/// 关闭对讲采样
/// \param winIndex 窗口序列号
///
- (void)stopSampleAudio:(NSUInteger)winIndex;
/// 开启对讲声音
/// \param winIndex 窗口序列号
///
- (void)startTalkSound:(NSUInteger)winIndex;
- (void)setSpeakerAutoEnable:(BOOL)enable;
/// 关闭对讲声音
/// \param winIndex 窗口序列号
///
- (void)stopTalkSound:(NSUInteger)winIndex;
- (NSInteger)getRecvAudioCallBack SWIFT_WARN_UNUSED_RESULT;
/// 在某个窗口上添加camera信息
/// \param camera camera
///
/// \param winIndex 窗口序列号
///
/// \param recordType 录制类型MP4或DAV
///
- (void)addCamera:(Camera * _Nonnull)camera at:(NSUInteger)winIndex recordType:(enum RecordType)recordType;
/// 批量添加camera信息
/// \param camerasModelArray 窗口模型
///
- (void)addBatchCameras:(NSArray<DHCameraAddModel *> * _Nonnull)camerasModelArray;
/// 删除某个camera,同时会停止播放
/// \param winIndex 窗口序列号
///
- (void)removeCamera:(NSUInteger)winIndex;
/// 删除所有camera
- (void)removeAllCamera;
- (void)setDisPlayRegion:(NSUInteger)winIndex enable:(BOOL)enable;
/// 播放某个窗口，需要先addCamera
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否成功，不是真正的状态，仅仅判断camera信息是否正确
- (BOOL)play:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 全部播放，有camera的窗口都会播放
///
/// returns:
/// 是否成功，不是真正的状态，仅仅判断camera信息是否正确，一个成功都成功
- (BOOL)playAll SWIFT_WARN_UNUSED_RESULT;
/// 开始回放录像 带seek时间 DirectPBCamera
/// \param winIndex 窗口序列号
///
/// \param startTime seek的时间
///
///
/// returns:
/// 是否成功，不是真正的状态，仅仅判断camera信息是否正确
- (BOOL)playBackDirectSeek:(NSUInteger)winIndex time:(NSUInteger)startTime SWIFT_WARN_UNUSED_RESULT;
/// 设置加密密码，动态改变时需要
/// \param key 加密密码
///
/// \param winIndex 窗口序列号
///
- (void)setKey:(NSString * _Nonnull)key winIndex:(NSUInteger)winIndex;
/// 窗口是否在播放
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在播放
- (BOOL)isPlaying:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否在播放（真实的走了playBegan的回调）
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在播放（真实的走了playBegan的回调）
- (BOOL)isPlayBegin:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 是否对讲中
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否对讲中
- (BOOL)isTalking:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否加载中
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在加载，REQUESING或者SEEKING
- (BOOL)isLoading:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否在暂停中
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否在暂停中
- (BOOL)isPaused:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 获取播放状态
/// \param winIndex 窗口序列号
///
- (NSInteger)getPlayerStatusSDKWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开启电子放大的能力，当窗口最大化的时候就可电子放大了
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnableElectricZoom:(NSUInteger)winIndex enable:(BOOL)enable;
/// 重置电子放大倍数
/// \param winIndex 窗口序列号
///
- (void)resetEZoomScale:(NSUInteger)winIndex;
/// 电子放大 忽略是否最大化
/// \param ignore 是否忽略
///
- (void)EZoomIgnoreMaxStateWithIgnore:(BOOL)ignore;
/// 是否正在电子放大
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否正在电子放大
- (BOOL)isEZooming:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 窗口是否可见
/// \param winIndex winIndex
///
///
/// returns:
/// 是否可见
- (BOOL)cellIsVisible:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开启PTZ手势
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnablePtz:(NSUInteger)winIndex enable:(BOOL)enable;
/// 开启三维定位
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnable3DPosition:(NSUInteger)winIndex enable:(BOOL)enable;
/// 开启冻结拖动
/// \param winIndex 窗口序列号
///
/// \param enable 开启或关闭
///
- (void)setEnableFreezeMode:(NSUInteger)winIndex enable:(BOOL)enable;
/// 设置按钮的隐藏
/// \param winIndex 窗口序列号
///
/// \param hidden 隐藏或显示
///
- (void)setAllBtnHidden:(NSUInteger)winIndex hidden:(BOOL)hidden;
/// 停止某个窗口
/// \param winIndex 窗口序列号
///
- (void)stop:(NSUInteger)winIndex;
/// 停止所有窗口的播放
- (void)stopAll;
/// 打开某个窗口的伴音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功与否
- (BOOL)openAudio:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 关闭某个窗口的伴音
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 成功与否
- (BOOL)closeAudio:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 是否正在音频播放
/// \param winIndex 窗口序列号
///
///
/// returns:
/// 是否正在电子放大
- (BOOL)isAudioOpened:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 判断共享链路的流媒体句柄是否存在
/// \param winIndex 窗口序号
///
///
/// returns:
/// 返回结果
- (BOOL)isOptHandleOKWithWinIndex:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 鱼眼能力判断
/// \param winIndex 窗口号
///
///
/// returns:
/// 是否可以鱼眼
- (BOOL)fishEyeEnable:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 开启或关闭鱼眼使能
/// \param winIndex 窗口号
///
/// \param enable 开启或关闭
///
- (void)setEnableFishEye:(NSUInteger)winIndex enable:(BOOL)enable;
/// 设置鱼眼模式
/// \param winIndex 窗口号
///
/// \param mainMountModel 安装模式
///
/// \param mainCalibrateModel 鱼眼模式
///
- (void)setOptFisheye:(NSUInteger)winIndex mainMountModel:(NSInteger)mainMountModel mainCalibrateModel:(NSInteger)mainCalibrateModel;
- (void)refshEyePointLineView;
- (BOOL)isFishEyeStream:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)startFishEye:(NSUInteger)winIndex x:(float)x y:(float)y SWIFT_WARN_UNUSED_RESULT;
- (void)doingFishEye:(NSUInteger)winIndex x:(float)x y:(float)y;
- (BOOL)endFishEye:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFishEyeOpen:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 进度条定位
/// \param winIndex 窗口号
///
/// \param time 时间，绝对时间
///
///
/// returns:
/// 是否成功，不是真实状态
- (BOOL)seek:(NSUInteger)winIndex by:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
/// 设定回放速度
/// \param speed 速度
///
/// \param winIndex 窗口号
///
- (void)setPlaySpeed:(float)speed at:(NSUInteger)winIndex;
/// 获取回放速度
/// \param winIndex 窗口号
///
- (float)getPlaySpeed:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 播放下一帧，单帧播放
/// \param winIndex 窗口号
///
- (void)playNextFrame:(NSUInteger)winIndex;
/// 播放连续帧
/// \param winIndex 窗口号
///
- (void)playContinuousFrame:(NSUInteger)winIndex;
/// 回放暂停
/// \param winIndex 窗口号
///
///
/// returns:
/// 是否成功，不代表真实状态
- (BOOL)pause:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
/// 回放继续
/// \param winIndex 窗口号
///
///
/// returns:
/// 是否成功，不代表真实状态
- (BOOL)resume:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)playBackAddFileList:(NSUInteger)winIndex recordFileArray:(NSArray<DHRecordFileInfo *> * _Nonnull)recordFileArray SWIFT_WARN_UNUSED_RESULT;
/// 最大化窗口
/// \param winIndex 窗口序列号
///
/// \param animate 是否有动画
///
- (void)maximize:(NSUInteger)winIndex animate:(BOOL)animate;
/// 最小化窗口
/// \param animate 是否有动画
///
- (void)minimizeWithAnimate:(BOOL)animate;
/// 是否最大化了
@property (nonatomic, readonly) BOOL isMaximized;
- (void)setPlaysetViewProportionWithWidth:(NSUInteger)width height:(NSUInteger)height winIndex:(NSUInteger)winIndex;
/// 设置host与UserName，用于路径创建
/// \param host host
///
/// \param userName UserName
///
- (void)setHost:(NSString * _Nullable)host userName:(NSString * _Nullable)userName;
/// 对某一窗口抓图,有相机音
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图路径
///
///
/// returns:
/// 抓图存放路径，nil时表示抓图失败
- (NSString * _Nullable)snapshot:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath SWIFT_WARN_UNUSED_RESULT;
/// 对某一窗口抓图,没有相机音
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图路径
///
///
/// returns:
/// 抓图存放路径，nil时表示抓图失败
- (NSString * _Nullable)snapshotWithoutSuond:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath SWIFT_WARN_UNUSED_RESULT;
/// 开始录像，会抓一张图，再生成.dav或.mp4的录像文件（名称相同，后缀修改）
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图的路径，可不传默认返回一个,这个路径需要传jpg结尾的文件，作为抓图的路径
///
///
/// returns:
/// 抓图的路径,当返回nil时表示不成功
- (NSString * _Nullable)startRecord:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath SWIFT_WARN_UNUSED_RESULT;
/// 开始录像，会抓一张图，再生成.dav或.mp4的录像文件（名称相同，后缀修改）
/// \param winIndex 窗口序列号
///
/// \param filePath 抓图的路径，可不传默认返回一个,这个路径需要传jpg结尾的文件，作为抓图的路径
///
///
/// returns:
/// 抓图的路径,当返回nil时表示不成功
- (NSString * _Nullable)startRecord:(NSUInteger)winIndex filePath:(NSString * _Nullable)filePath recordType:(enum RecordType)recordType SWIFT_WARN_UNUSED_RESULT;
/// 停止录像
/// \param winIndex 窗口序列号
///
- (void)stopRecord:(NSUInteger)winIndex;
/// 是否正在录像
/// \param winIndex 窗口号
///
///
/// returns:
/// Bool
- (BOOL)isRecording:(NSUInteger)winIndex SWIFT_WARN_UNUSED_RESULT;
- (void)setRealPlayPolicy:(NSInteger)realPlayPolicy playPolicy:(NSInteger)playPolicy waitTime:(NSInteger)waitTime winIndex:(NSUInteger)winIndex;
- (void)setDecodeEngineTypeWithDecodeType:(NSInteger)decodeType winIndex:(NSUInteger)winIndex;
- (void)showWaitProgress:(NSUInteger)winIndex;
- (void)showCenterBtn:(NSUInteger)winIndex;
- (void)showAddCameraBtn:(NSUInteger)winIndex;
- (void)showReplayBtn:(NSUInteger)winIndex;
- (void)showRefreshBtn:(NSUInteger)winIndex;
- (void)showLockBtn:(NSUInteger)winIndex;
- (void)showDeviceLockBtn:(NSUInteger)winIndex;
- (void)hideWaitProgress:(NSUInteger)winIndex;
- (void)hideAddCameraBtn:(NSUInteger)winIndex;
- (void)hideReplayBtn:(NSUInteger)winIndex;
- (void)hideRefreshBtn:(NSUInteger)winIndex;
- (void)hideLockBtn:(NSUInteger)winIndex;
- (void)swithWindowFrom:(NSUInteger)oldPosition to:(NSUInteger)newPosition;
- (void)setDefultSplitNumber:(NSUInteger)defultSplitNumber animate:(BOOL)animate;
- (void)setCenterBtnWidth:(NSInteger)width;
/// 初始化
/// \param frame frame
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// 初始化
/// \param aDecoder NSCoder
///
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface DHMediaPlayView (SWIFT_EXTENSION(DHMediaPlay))
- (void)layoutSubviews;
@end





enum PtzOperation : NSInteger;

SWIFT_PROTOCOL("_TtP11DHMediaPlay21DHPTZListenerProtocol_")
@protocol DHPTZListenerProtocol <NSObject>
@optional
/// PTZ手势的回调，参照ptz业务接口，需要一个开始和结束的标记。
/// \param winIndex 窗口序列号
///
/// \param ptzType PTZ手势类型
///
/// \param stop 是否需要停止手势
///
- (void)onPTZControl:(NSUInteger)winIndex ptzType:(enum PtzOperation)ptzType stop:(BOOL)stop;
/// 三维定位手势的回调，xy组成点，z表示拉伸强度
/// \param winIndex 窗口序列号
///
/// \param x x
///
/// \param y y
///
/// \param z z
///
- (void)on3DPositionControl:(NSUInteger)winIndex x:(CGFloat)x y:(CGFloat)y z:(CGFloat)z;
- (void)on3DPositionControl:(NSUInteger)winIndex windowWidth:(CGFloat)windowWidth windowHeight:(CGFloat)windowHeight boxWidth:(CGFloat)boxWidth boxHeight:(CGFloat)boxHeight boxMidx:(CGFloat)boxMidx boxMidy:(CGFloat)boxMidy zoomOut:(BOOL)zoomOut;
@end

@class UIButton;
@class UIGestureRecognizer;

SWIFT_CLASS("_TtC11DHMediaPlay10DHPlayCell")
@interface DHPlayCell : UIView <UIGestureRecognizerDelegate>
@property (nonatomic, strong) IBOutlet UIView * _Null_unspecified customView;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified centerBtn;
/// 初始化, 统一使用这个方法创建
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)activityViewAnimateWithAnimate:(BOOL)animate;
- (void)layoutSubviews;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end



enum PageCountViewStyle : NSInteger;

SWIFT_CLASS("_TtC11DHMediaPlay12DHPlayConfig")
@interface DHPlayConfig : NSObject
/// 单例
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DHPlayConfig * _Nonnull shareInstance;)
+ (DHPlayConfig * _Nonnull)shareInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Nonnull borderNormalColor;
@property (nonatomic, strong) UIColor * _Nonnull borderSelectedColor;
@property (nonatomic) CGFloat borderNormalWidth;
@property (nonatomic) CGFloat borderSelectedWidth;
@property (nonatomic, strong) UIColor * _Nonnull windowNormalBGColor;
@property (nonatomic, strong) UIColor * _Nonnull windowSelectedBGColor;
@property (nonatomic, strong) UIColor * _Nonnull trashViewBGColor;
@property (nonatomic, copy) NSString * _Nullable trashViewText;
@property (nonatomic, copy) NSString * _Nullable trashViewSelectText;
@property (nonatomic, strong) UIImage * _Nullable addBtnImage;
@property (nonatomic, strong) UIImage * _Nullable addBtnHighlightedImage;
@property (nonatomic, strong) UIImage * _Nullable replayBtnImage;
@property (nonatomic, strong) UIImage * _Nullable replayBtnHighlightedImage;
@property (nonatomic, strong) UIImage * _Nullable refreshBtnImage;
@property (nonatomic, strong) UIImage * _Nullable lockBtnImage;
@property (nonatomic, strong) UIImage * _Nullable deviceLockBtnImage;
@property (nonatomic) NSUInteger maxWindowCount;
@property (nonatomic) enum PageCountViewStyle pageCountViewStyle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum PlayStatusType : NSInteger;

/// 播放监听的协议
SWIFT_PROTOCOL("_TtP11DHMediaPlay22DHPlayListenerProtocol_")
@protocol DHPlayListenerProtocol <NSObject>
@optional
/// 播放状态回调
/// \param winIndex 窗口序列号
///
/// \param status 播放状态
///
/// \param code 状态码，供上层直接使用
///
- (void)onPlayeStatusCallback:(NSUInteger)winIndex status:(enum PlayStatusType)status code:(NSInteger)code;
- (void)onPlayeStatusCallback:(NSUInteger)winIndex status:(enum PlayStatusType)status codeStr:(NSString * _Nonnull)codeStr;
/// 播放成功回调，已经组帧完成
/// \param winIndex 窗口序列号
///
- (void)onPlayBegin:(NSUInteger)winIndex;
/// 播放结束，回放时才有
/// \param winIndex 窗口序列号
///
- (void)onPlayFinish:(NSUInteger)winIndex;
/// 码流速率的回调
/// \param winIndex 窗口序列号
///
/// \param bitrate 码流速率，单位B/s
///
- (void)onReceiveBitrate:(NSUInteger)winIndex bitrate:(NSInteger)bitrate;
/// 回放时间回调
/// \param winIndex 窗口序列号
///
/// \param time 回放时间（绝对时间单位秒）
///
- (void)onPlayTime:(NSUInteger)winIndex time:(NSInteger)time;
/// 录像文件时间信息回调
/// \param winIndex 窗口号
///
/// \param startTime 开始时间（绝对时间单位秒）
///
/// \param endTime 结束时间（绝对时间单位秒）
///
- (void)onFileTime:(NSUInteger)winIndex startTime:(NSInteger)startTime endTime:(NSInteger)endTime;
/// 某个窗口的伴音被打开或关闭的回调,同时只有一个伴音能被打开
/// \param winIndex 窗口号
///
/// \param open 开启或关闭
///
- (void)onAudio:(NSUInteger)winIndex open:(BOOL)open;
/// 某个窗口的录像被关闭的回调
/// \param winIndex 窗口号
///
- (void)onRecordStop:(NSUInteger)winIndex;
/// 重新播放某个窗口
/// \param winIndex 窗口号
///
- (void)onReplay:(NSUInteger)winIndex;
/// 暂停某个窗口
/// \param winIndex 窗口号
///
- (void)onPause:(NSUInteger)winIndex;
/// 恢复某个窗口
/// \param winIndex 窗口号
///
- (void)onResume:(NSUInteger)winIndex;
/// 停止播放某个窗口
/// \param winIndex 窗口号
///
- (void)onStop:(NSUInteger)winIndex;
/// 播放画面分辨率回调
/// \param width 宽
///
/// \param height 高
///
/// \param index 窗口序号
///
- (void)onResolutionChanged:(NSInteger)width height:(NSInteger)height index:(NSInteger)index;
/// 播放状态回调
/// \param winIndex 窗口index
///
/// \param status 播放状态json
///
- (void)onProgressStatus:(NSUInteger)winIndex status:(NSString * _Nonnull)status;
/// 播放流媒体回调
/// \param winIndex 窗口index
///
/// \param message 流媒体信息json
///
- (void)onStreamLogInfo:(NSUInteger)winIndex message:(NSString * _Nonnull)message;
@end

/// PLAYSDK log等级
/// 0,  unknown
/// 1,  fatal, when setting this level, (fatal) will output
/// 2,  error,when setting this level, (fatal,error) will output
/// 3,  warn, when setting this level, (fatal,error,warn) will output
/// 4,  info, when setting this level, (fatal,error,warn,info) will output
/// 5,  Trace, when setting this level, (fatal,error,warn,info,trace) will output
/// 6,  Debug, when setting this level, (fatal,error,warn,info,trace,debug) will output
typedef SWIFT_ENUM(NSInteger, DHPlaySDKLogLevel, closed) {
  DHPlaySDKLogLevelUnknow = 0,
  DHPlaySDKLogLevelFatal = 1,
  DHPlaySDKLogLevelErr = 2,
  DHPlaySDKLogLevelWarning = 3,
  DHPlaySDKLogLevelInfo = 4,
  DHPlaySDKLogLevelTrace = 5,
  DHPlaySDKLogLevelDebug = 6,
};


/// netsdk录像文件模型
SWIFT_CLASS("_TtC11DHMediaPlay16DHRecordFileInfo")
@interface DHRecordFileInfo : NSObject
/// 通道号
@property (nonatomic) NSInteger channelId;
/// 文件总帧数
@property (nonatomic) NSInteger frameNum;
/// 文件长度 Kbyte
@property (nonatomic) NSInteger size;
/// 磁盘号(区分网络录像和本地录像的类型,0－127表示本地录像,其中64表示光盘1,128表示网络录像)
@property (nonatomic) NSInteger driveNo;
/// 起始簇号
@property (nonatomic) NSInteger startCluster;
/// 录象文件类型  0：普通录象；1：报警录象；2：移动检测；3：卡号录象；4：图片, 5: 智能录像, 19: POS录像, 255:所有录像
@property (nonatomic) NSInteger recordFileType;
/// 0:普通录像 1:重要录像
@property (nonatomic) NSInteger importantReCId;
/// 文件定位索引(recordFileType==4<图片>时,importantRecID<<8 + hint ,组成图片定位索引
@property (nonatomic) NSInteger hint;
/// 0-主码流录像 1-辅码1流录像 2-辅码流2 3-辅码流
@property (nonatomic) NSInteger recType;
/// 文件名
@property (nonatomic, copy) NSString * _Nonnull fileName;
/// 开始时间
@property (nonatomic) NSInteger beginTime;
/// 结束时间
@property (nonatomic) NSInteger endTime;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum TalkResultType : NSInteger;

/// 对讲回调的协议
SWIFT_PROTOCOL("_TtP11DHMediaPlay22DHTalkListenerProtocol_")
@protocol DHTalkListenerProtocol <NSObject>
@optional
- (void)onProgressStatus:(NSString * _Nonnull)status;
- (void)onStreamLogInfo:(NSString * _Nonnull)message;
/// 对讲结果的回调
/// \param winIndex 窗口号
///
/// \param result 对讲结果, TalkResultType
///
/// \param code 真正的错误码
///
- (void)onTalkResult:(NSUInteger)winIndex result:(enum TalkResultType)result code:(NSInteger)code;
/// sip对讲的回调
/// \param winIndex 窗口号
///
/// \param result 对讲结果, TalkResultType
///
/// \param data 数据，AudioSessionId等
///
- (void)onSipTalkResult:(NSUInteger)winIndex result:(enum TalkResultType)result data:(NSString * _Nonnull)data;
@end

enum WinControlType : NSInteger;
enum PageChangeType : NSInteger;

/// 窗口动作监听的协议
SWIFT_PROTOCOL("_TtP11DHMediaPlay24DHWindowListenerProtocol_")
@protocol DHWindowListenerProtocol <NSObject>
@optional
/// 点击了window上某个按钮
/// \param winIndex 点击的窗口序列号
///
/// \param type 点击事件类型
///
- (void)onControlClick:(NSUInteger)winIndex type:(enum WinControlType)type;
/// 某两个Cell之间的位置互换了
/// \param moveWinIndex 移动的cell的WinIndex
///
/// \param desWinIndex 被替换的cell的WinIndex
///
/// \param oldPosition 移动前，被移动cell的Position
///
/// \param desPosition 移动后，被移动ell的Position
///
- (void)onSwapCellWithMoveWinIndex:(NSUInteger)moveWinIndex desWinIndex:(NSUInteger)desWinIndex oldPosition:(NSUInteger)oldPosition desPosition:(NSUInteger)desPosition;
/// 选中某个窗口的回调
/// \param newWinIndex 新选中的窗口序列号
///
/// \param oldWinIndex 原来选中的窗口序列号
///
- (void)onWindowSelectChangedWithNewWinIndex:(NSUInteger)newWinIndex oldWinIndex:(NSUInteger)oldWinIndex;
/// 窗口页面变化的回调
/// \param newPage 切换的新Page
///
/// \param oldPage 原来的Page
///
/// \param totalPages 切换后总共的页面数
///
/// \param type 切换类型，见PageChangeType
///
- (void)onPageChangeWithNewPage:(NSUInteger)newPage oldPage:(NSUInteger)oldPage totalPages:(NSUInteger)totalPages type:(enum PageChangeType)type;
/// 组件手动删除了某个camera
/// \param winIndex 窗口号
///
- (void)onRemoveCamera:(NSUInteger)winIndex;
/// 电子放大开启或关闭的回调
/// \param winIndex 窗口号
///
/// \param open 是否开启
///
- (void)onEZoom:(NSUInteger)winIndex open:(BOOL)open;
/// 双击的回调
/// \param winIndex 窗口号
///
- (void)onDoubleClick:(NSUInteger)winIndex;
/// 开启鱼眼后拖拽事件的回调
/// \param winIndex 窗口号
///
/// \param point 拖拽点位
///
- (void)fishEyeDragWithPoint:(NSUInteger)winIndex point:(CGPoint)point;
/// 鱼眼拖拽开始事件的回调
/// \param winIndex 窗口
///
/// \param point 拖拽点位
///
- (void)fishEyeDragBeginWithPoint:(NSUInteger)winIndex point:(CGPoint)point;
/// 鱼眼拖拽结束事件的回调
/// \param winIndex 窗口
///
- (void)fishEyeDragEnd:(NSUInteger)winIndex;
@end


/// DSS播放基础Camera
SWIFT_CLASS("_TtC11DHMediaPlay13DSSBaseCamera")
@interface DSSBaseCamera : Camera
/// dpsdk句柄 【可选】【2选1】DPSDK需要，默认0表示没有
@property (nonatomic) NSInteger dpHandle;
/// 云基线或Express服务token 【可选】【2选1】云基线或Express需要
@property (nonatomic, copy) NSString * _Nullable dpRestToken;
/// 新增authorization字段用于达尔文平台
@property (nonatomic, copy) NSString * _Nullable authorization;
/// 服务Ip
@property (nonatomic, copy) NSString * _Nullable server_ip;
/// 服务端口
@property (nonatomic) NSInteger server_port;
/// 通道ID
@property (nonatomic, copy) NSString * _Nullable cameraID;
/// 码流类型：1主码流，2子码流，3三码流，默认1
@property (nonatomic) NSInteger streamType;
/// 是否I帧加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// I帧加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 是否是云基线版本，【可选】默认false
@property (nonatomic) BOOL bCloudBase;
/// 是否是EVO达尔文版本，【可选】默认false
@property (nonatomic) BOOL bEVOBase;
/// 是否使用Https【可选】默认0
@property (nonatomic) NSInteger isUseHttps;
/// 是否使用Tls加密码流【可选】默认false
@property (nonatomic) BOOL isUseTls;
/// 是否支持RVSL重定向【可选】默认false
@property (nonatomic) BOOL isroute;
/// userId【可选】默认false, isroute为true时必选
@property (nonatomic, copy) NSString * _Nonnull userId;
/// regionId【可选】默认false, isroute为true时必选
@property (nonatomic, copy) NSString * _Nonnull regionId;
/// domainId【可选】默认false, isroute为true时必选
@property (nonatomic, copy) NSString * _Nonnull domainId;
/// 业务功能模块编码
@property (nonatomic, copy) NSString * _Nonnull xOperateCode;
/// 业务功能模块名称
@property (nonatomic, copy) NSString * _Nonnull xOperateName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class DSSPBCameraArg;

/// DSS回放Camera
SWIFT_CLASS("_TtC11DHMediaPlay11DSSPBCamera")
@interface DSSPBCamera : DSSBaseCamera
/// 录像来源 0.All 1.Device 2.Platfrom 云基线或Express不可为0，默认2
@property (nonatomic) NSInteger recordSource;
/// 是否按时间回放 默认false
@property (nonatomic) BOOL isPlayBackByTime;
/// 是否倒放 默认false
@property (nonatomic) BOOL isBack;
/// 开始时间 绝对时间，单位秒默认0
@property (nonatomic) NSInteger beginTime;
/// 结束时间 绝对时间，单位秒默认0
@property (nonatomic) NSInteger endTime;
@property (nonatomic) NSInteger needBeginTime;
/// 文件列表数据【可选】当isPlayBackByTime== false时有效
@property (nonatomic, copy) NSArray<DSSPBCameraArg *> * _Nullable recordFilelist;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// DSS回放文件片段数据对象
SWIFT_CLASS("_TtC11DHMediaPlay14DSSPBCameraArg")
@interface DSSPBCameraArg : NSObject
/// 录像长度
@property (nonatomic) double filelen;
/// 录像名
@property (nonatomic, copy) NSString * _Nullable fileName;
/// 存储服务ID
@property (nonatomic) NSInteger ssID;
/// 磁盘ID
@property (nonatomic, copy) NSString * _Nullable diskID;
/// 文件句柄，默认0
@property (nonatomic) NSInteger fileHandler;
/// 开始时间 绝对时间，单位秒默认0
@property (nonatomic) NSTimeInterval beginTime;
/// 结束时间 绝对时间，单位秒默认0
@property (nonatomic) NSTimeInterval endTime;
/// 录像来源 1-all 2-device record 3-platform 默认3
@property (nonatomic) NSInteger recordSource;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// DSS实时Camera
SWIFT_CLASS("_TtC11DHMediaPlay11DSSRTCamera")
@interface DSSRTCamera : DSSBaseCamera
/// 媒体类型 1.video 2.audio 3.video and audio【可选】DPSDK需要,默认0表示未选择
@property (nonatomic) NSInteger mediaType;
/// 是否检查认证 【可选】DPSDK需要
@property (nonatomic) BOOL isCheckPermission;
/// 多画面预览从第几个通道开始，默认-1
@property (nonatomic) NSInteger startChannelIndex;
/// 多画面预览画面分割数，默认0
@property (nonatomic) NSInteger separateNum;
/// 流出荷载类型，默认601
@property (nonatomic, copy) NSString * _Nonnull trackID;
/// 设备编码 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceID;
/// 支持的码流类型
@property (nonatomic) NSInteger supportStreamType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay17SipTalkBaseCamera")
@interface SipTalkBaseCamera : Camera
@property (nonatomic) NSInteger callType;
@property (nonatomic, copy) NSString * _Nonnull serverIp;
@property (nonatomic, copy) NSString * _Nonnull userId;
@property (nonatomic, copy) NSString * _Nonnull localIp;
@property (nonatomic) NSInteger port;
@property (nonatomic) NSInteger vPort;
@property (nonatomic) NSInteger callId;
@property (nonatomic) NSInteger dlgId;
@property (nonatomic) NSInteger tId;
@property (nonatomic) NSInteger sampleRate;
@property (nonatomic) NSInteger sampleDepth;
@property (nonatomic) NSInteger encodeType;
@property (nonatomic) NSInteger packType;
@property (nonatomic) BOOL isCall;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay17RtpOUdpTalkCamera")
@interface RtpOUdpTalkCamera : SipTalkBaseCamera
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay19DSSRTPSIPTalkCamera")
@interface DSSRTPSIPTalkCamera : RtpOUdpTalkCamera
@property (nonatomic) NSInteger mediaType;
/// dpsdk句柄 【可选】【2选1】DPSDK需要，默认0表示没有
@property (nonatomic) NSInteger dpHandle;
/// 云基线或Express服务token 【可选】【2选1】云基线或Express需要
@property (nonatomic, copy) NSString * _Nullable dpRestToken;
/// 服务Ip
@property (nonatomic, copy) NSString * _Nullable server_ip;
/// 服务端口
@property (nonatomic) NSInteger server_port;
/// 通道ID
@property (nonatomic, copy) NSString * _Nullable cameraID;
/// 码流类型：1主码流，2子码流，3三码流，默认1
@property (nonatomic) NSInteger streamType;
/// 是否I帧加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// I帧加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 是否使用Https【可选】默认1
@property (nonatomic) NSInteger isUseHttps;
/// 设备编码 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceID;
/// 是否检查认证 【可选】DPSDK需要
@property (nonatomic) BOOL isCheckPermission;
/// 是否使用Tls加密码流【可选】默认false
@property (nonatomic) BOOL isUseTls;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LoginExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay16DirectBaseCamera")
@interface DirectBaseCamera : Camera
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// netsdkk句柄，【可选】为空时携带loginExtInfo
@property (nonatomic, copy) NSString * _Nullable loginHandle;
/// loginExtInfo，【可选】
@property (nonatomic, strong) LoginExtInfo * _Nullable loginExtInfo;
/// 是否加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// 加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay14DirectPBCamera")
@interface DirectPBCamera : DirectBaseCamera
/// 开始时间【必选】
@property (nonatomic) NSInteger startTime;
/// 结束时间【必选】
@property (nonatomic) NSInteger endTime;
/// 录像类型 【必选】
@property (nonatomic) NSInteger recordType;
/// false:从recordFileList中读取文件，按文件回放 true:按时间回放
@property (nonatomic) BOOL isPlayBackByTime;
/// 按文件回放 需要传入文件片段
@property (nonatomic, copy) NSArray<DHRecordFileInfo *> * _Nonnull recordFileList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay14DirectRTCamera")
@interface DirectRTCamera : DirectBaseCamera
/// 和通道对讲 【可选】 默认false 默认进行设备对讲
@property (nonatomic) BOOL talkWithChannel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FISHEYE_CALIBRATMODE, closed) {
  FISHEYE_CALIBRATMODEINVALID = 0,
  FISHEYE_CALIBRATMODEOFF = 1,
  FISHEYE_CALIBRATMODEORIGINAL = 2,
  FISHEYE_CALIBRATMODEPANORAMA = 3,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_ONE_EPTZ = 4,
  FISHEYE_CALIBRATMODEDOUBLE_PANORAMA = 5,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_DOUBLE_PANORAMA = 6,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_THREE_EPTZ_REGION = 7,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_THREE_EPTZ_REGION = 8,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_TWO_EPTZ_REGION = 9,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_FOUR_EPTZ_REGION = 10,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_FOUR_EPTZ_REGION = 11,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_SIX_EPTZ_REGION = 12,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_EIGHT_EPTZ_REGION = 13,
  FISHEYE_CALIBRATMODEPANORAMA_PLUS_EIGHT_EPTZ_REGION = 14,
  FISHEYE_CALIBRATMODETWO_EPTZ_REGION_WITH_ORIGINAL = 15,
  FISHEYE_CALIBRATMODEFOUR_EPTZ_REGION_WITH_ORIGINAL = 16,
  FISHEYE_CALIBRATMODEDOUBLE_PANORAMA_WITH_ORIGINAL = 17,
  FISHEYE_CALIBRATMODEFOUR_EPTZ_REGION_WITH_PANORAMA = 18,
  FISHEYE_CALIBRATMODETWO_EPTZ_REGION = 19,
  FISHEYE_CALIBRATMODESINGLE = 20,
  FISHEYE_CALIBRATMODEFOUR_EPTZ_REGION = 21,
  FISHEYE_CALIBRATMODEUSER_DEFINED = 22,
  FISHEYE_CALIBRATMODEPHONE = 23,
  FISHEYE_CALIBRATMODEORIGINAL_PLUS_ONE_EPTZ_REGION = 24,
  FISHEYE_CALIBRATMODEONE_EPTZ_REGION = 25,
  FISHEYE_CALIBRATMODENUM = 26,
};

typedef SWIFT_ENUM(NSInteger, FISHEYE_MOUNTMODE, closed) {
  FISHEYE_MOUNTMODEINVALID = 0,
  FISHEYE_MOUNTMODECEIL = 1,
  FISHEYE_MOUNTMODEWALL = 2,
  FISHEYE_MOUNTMODEFLOOR = 3,
  FISHEYE_MOUNTMODENUM = 4,
};

typedef SWIFT_ENUM(NSInteger, FISHEYE_winType, closed) {
  FISHEYE_winTypeCricle = 0,
  FISHEYE_winTypePanorama = 1,
  FISHEYE_winTypeSubWindow = 2,
};


/// 本地文件播放
SWIFT_CLASS("_TtC11DHMediaPlay10FileCamera")
@interface FileCamera : Camera
@property (nonatomic, copy) NSString * _Nullable filePath;
/// 文件类型 参考 E_MEDIA_FORMAT,默认MEDIA_DAV
@property (nonatomic) NSInteger fileType;
/// 是否加密 【可选】默认NO
@property (nonatomic) BOOL isEncrypt;
/// 加密密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HttpExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay14HttpBaseCamera")
@interface HttpBaseCamera : Camera
/// 私有播放地址
@property (nonatomic, copy) NSString * _Nonnull httpURL;
/// 是否加密
@property (nonatomic) BOOL isEncrypt;
/// 加密秘钥
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 设备用户名 【必选】
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 【必选】
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 共享链路模式【必选】
@property (nonatomic) NSInteger sharedLinkMode;
/// 共享链路句柄【可选】
@property (nonatomic, copy) NSString * _Nonnull handleKey;
/// 是否开启环回认证【可选】
@property (nonatomic) NSInteger isAuth;
/// 是否开启tls【可选】
@property (nonatomic) BOOL isTls;
/// 是否抛出鉴权失败错误码
@property (nonatomic) BOOL isThrowP2PAuthErr;
/// httpExtInfo拓展信息 【可选】
@property (nonatomic, strong) HttpExtInfo * _Nullable httpExtInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay11HttpExtInfo")
@interface HttpExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// 是否强制MTS 【必选】
@property (nonatomic) BOOL isForceMts;
/// 是否使用决策服务 【必选】
@property (nonatomic) BOOL isUseRep;
/// 开始时间 绝对时间，单位秒默认0【可选】
@property (nonatomic) NSInteger beginTime;
/// 结束时间 绝对时间，单位秒默认0【可选】
@property (nonatomic) NSInteger endTime;
/// 录像文件名（携带路径）【可选】
@property (nonatomic, copy) NSString * _Nonnull fileId;
/// 码流类型 【必选】
@property (nonatomic) NSInteger subtype;
/// 对讲设备级”device” 或者 通道级”channel”
@property (nonatomic, copy) NSString * _Nonnull deviceType;
/// 普通对讲”talk” 呼叫对讲”call”
@property (nonatomic, copy) NSString * _Nonnull talkType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay12HttpPBCamera")
@interface HttpPBCamera : HttpBaseCamera
/// 相对录像开始时间的偏移秒数【必选】
@property (nonatomic) NSInteger offsetTime;
/// 是否倒放【可选】
@property (nonatomic) BOOL isReverse;
/// 倍数播放【可选】
@property (nonatomic) NSInteger speed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 私有协议Http
SWIFT_CLASS("_TtC11DHMediaPlay12HttpRTCamera")
@interface HttpRTCamera : HttpBaseCamera
/// 是否具有Http协议对讲能力
@property (nonatomic) BOOL talkHttpAblitily;
/// 对讲共享链路模式【必选】
@property (nonatomic) NSInteger talkSharedLinkMode;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 乐橙播放基础Camera
SWIFT_CLASS("_TtC11DHMediaPlay12LCBaseCamera")
@interface LCBaseCamera : Camera
@property (nonatomic, copy) NSString * _Nullable accessTok;
@property (nonatomic, copy) NSString * _Nullable psk;
@property (nonatomic, copy) NSString * _Nullable deviceID;
@property (nonatomic) NSInteger channelNo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class LCPBCameraArg;

/// 乐橙回放Camera
SWIFT_CLASS("_TtC11DHMediaPlay10LCPBCamera")
@interface LCPBCamera : LCBaseCamera
@property (nonatomic) NSInteger beginTime;
@property (nonatomic) NSInteger endTime;
@property (nonatomic) BOOL isByFile;
@property (nonatomic) BOOL isCloud;
@property (nonatomic, copy) NSArray<LCPBCameraArg *> * _Nullable recordFilelist;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 乐橙回放文件片段数据对象
SWIFT_CLASS("_TtC11DHMediaPlay13LCPBCameraArg")
@interface LCPBCameraArg : NSObject
@property (nonatomic) NSInteger beginTime;
@property (nonatomic) NSInteger endTime;
@property (nonatomic, copy) NSString * _Nullable recordId;
@property (nonatomic) NSInteger recordType;
@property (nonatomic, copy) NSString * _Nullable deviceId;
@property (nonatomic) NSInteger channelNo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 乐橙实时Camera
SWIFT_CLASS("_TtC11DHMediaPlay10LCRTCamera")
@interface LCRTCamera : LCBaseCamera
@property (nonatomic) NSInteger streamType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 额外信息
SWIFT_CLASS("_TtC11DHMediaPlay12LoginExtInfo")
@interface LoginExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 设备用户名 【必选】
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 【必选】
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 登录端口 【必选】 默认37777
@property (nonatomic) NSInteger port;
/// 直连方式下设备IP字段 【可选】
@property (nonatomic, copy) NSString * _Nonnull IP;
/// 设备类型 0：大华p2p 1：乐橙设备 2：IP方式登录，此时IP必须携带 默认0
@property (nonatomic) NSInteger deviceType;
/// 是否转发(NETSDK)
@property (nonatomic) BOOL isTcpReLay;
/// 是否走策略登陆
@property (nonatomic) NSInteger mLoginType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay10M3UExtInfo")
@interface M3UExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 云录像ID 【必选】
@property (nonatomic, copy) NSString * _Nonnull recordId;
/// 云录像类型 【必选】参考 E_CLOUD_RECORD_TYPE
@property (nonatomic, copy) NSString * _Nonnull recordType;
/// 录像文件路径 【必选】
@property (nonatomic, copy) NSString * _Nonnull recordPath;
/// 区域 【必选】
@property (nonatomic, copy) NSString * _Nonnull region;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// 页面转换事件类型
/// <ul>
///   <li>
///     maximize: 最大化窗口
///   </li>
///   <li>
///     minimize: 最小化窗口
///   </li>
///   <li>
///     scroll: 滚动窗口
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PageChangeType, closed) {
  PageChangeTypeMaximize = 0,
  PageChangeTypeMinimize = 1,
  PageChangeTypeScroll = 2,
};

typedef SWIFT_ENUM(NSInteger, PageCountViewStyle, closed) {
  PageCountViewStylePageControlAndLabel = 0,
  PageCountViewStyleLabel = 1,
};

/// 播放的状态
/// <ul>
///   <li>
///     eUnknow: 未知
///   </li>
///   <li>
///     ePlayFirstFrame: 获取到第一帧数据,可去显示播放画面了
///   </li>
///   <li>
///     ePlayEnd: 视频播放结束
///   </li>
///   <li>
///     eNetworkaAbort: 网络异常
///   </li>
///   <li>
///     ePlayFailed: 播放异常，检查播放视频数据错误
///   </li>
///   <li>
///     eBadFile: 异常文件，不支持的文件格式
///   </li>
///   <li>
///     eSeekFailed: 拖拽失败
///   </li>
///   <li>
///     eSeekSuccess: 拖拽成功
///   </li>
///   <li>
///     eSeekCrossBorder: 拖拽越界
///   </li>
///   <li>
///     ePlayDataOver: 所有文件播放结束，录像相关
///   </li>
///   <li>
///     ePlayNoAuthority: 没有权限
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PlayStatusType, closed) {
  PlayStatusTypeEUnknow = 0,
  PlayStatusTypeEPlayFirstFrame = 1,
  PlayStatusTypeEPlayEnd = 2,
  PlayStatusTypeENetworkaAbort = 3,
  PlayStatusTypeEPlayFailed = 4,
  PlayStatusTypeEBadFile = 5,
  PlayStatusTypeESeekFailed = 6,
  PlayStatusTypeESeekSuccess = 7,
  PlayStatusTypeESeekCrossBorder = 8,
  PlayStatusTypeEPlayDataOver = 9,
  PlayStatusTypeEPlayNoAuthority = 10,
};

/// Ptz操作方向
/// <ul>
///   <li>
///     begin: 开始
///   </li>
///   <li>
///     end: 结束
///   </li>
///   <li>
///     zoomIn: 放大
///   </li>
///   <li>
///     zoomOut: 缩小
///   </li>
///   <li>
///     zoomEnd: 放大结束
///   </li>
///   <li>
///     directionLeft: 左
///   </li>
///   <li>
///     directionRight: 右
///   </li>
///   <li>
///     directionUp: 上
///   </li>
///   <li>
///     directionDown: 下
///   </li>
///   <li>
///     directionLeftUp: 左上
///   </li>
///   <li>
///     directionLeftDown: 左上
///   </li>
///   <li>
///     directionRightUp: 右上
///   </li>
///   <li>
///     directionRightDown: 右下
///   </li>
///   <li>
///     directionEnd: 方向结束
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, PtzOperation, closed) {
  PtzOperationBegin = 0,
  PtzOperationZoomIn = 1,
  PtzOperationZoomOut = 2,
  PtzOperationDirectionLeft = 3,
  PtzOperationDirectionRight = 4,
  PtzOperationDirectionUp = 5,
  PtzOperationDirectionDown = 6,
  PtzOperationDirectionLeftUp = 7,
  PtzOperationDirectionLeftDown = 8,
  PtzOperationDirectionRightUp = 9,
  PtzOperationDirectionRightDown = 10,
};

@class RTSPExtInfo;

SWIFT_CLASS("_TtC11DHMediaPlay14RTSPBaseCamera")
@interface RTSPBaseCamera : Camera
/// RTSP播放地址 【可选】空时需要携带rtspExtInfo拓展信息
@property (nonatomic, copy) NSString * _Nullable rtspURL;
/// 是否I帧加密 【可选】默认false
@property (nonatomic) BOOL isEncrypt;
/// I帧加密的密码 【可选】默认””
@property (nonatomic, copy) NSString * _Nonnull psk;
/// 设备用户名 【必选】
@property (nonatomic, copy) NSString * _Nonnull userName;
/// 设备密码 【必选】
@property (nonatomic, copy) NSString * _Nonnull pwd;
/// 是否抛出鉴权失败错误码
@property (nonatomic) BOOL isThrowP2PAuthErr;
/// rtspExtInfo拓展信息 【可选】
@property (nonatomic, strong) RTSPExtInfo * _Nullable rtspExtInfo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay11RTSPExtInfo")
@interface RTSPExtInfo : NSObject
/// 设备序列号 【必选】
@property (nonatomic, copy) NSString * _Nonnull deviceSN;
/// 通道号 【必选】
@property (nonatomic) NSInteger channelId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger streamType;
/// 是否使用决策服务 【可选】默认false
@property (nonatomic) BOOL isUseRep;
/// 是否强制MTS 【可选】默认false
@property (nonatomic) BOOL isForceMts;
/// 是否开启优化拉流 【可选】默认false
@property (nonatomic) BOOL isOpt;
/// 开始时间，UNIX时间戳 【可选】 默认0
@property (nonatomic) NSInteger beginTime;
/// 结束时间，UNIX时间戳 【可选】 默认0
@property (nonatomic) NSInteger endTime;
/// 录像文件名（携带路径）【可选】
@property (nonatomic, copy) NSString * _Nullable fileId;
/// 码流类型，主或辅或其他 【必选】
@property (nonatomic) NSInteger talkSubType;
/// 对讲通道号
@property (nonatomic) NSInteger talkChannelId;
/// 对讲设备级”device” 或者 通道级”channel”
@property (nonatomic, copy) NSString * _Nonnull talkDeviceType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay12RTSPPBCamera")
@interface RTSPPBCamera : RTSPBaseCamera
/// 相对录像开始时间的偏移秒数 【必选】默认0
@property (nonatomic) NSInteger offsetTime;
/// 是否倒放 【可选】默认false
@property (nonatomic) BOOL isReverse;
/// 倍速播放 【可选】默认1
@property (nonatomic) NSInteger speed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11DHMediaPlay12RTSPRTCamera")
@interface RTSPRTCamera : RTSPBaseCamera
///
@property (nonatomic, copy) NSString * _Nullable userAgent;
///
@property (nonatomic) NSInteger connType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// 设备生产商，用于在录像时进行区别
/// <ul>
///   <li>
///     unknow: 未知
///   </li>
///   <li>
///     dahua: 大华
///   </li>
///   <li>
///     hik: 海康
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, RecordType, closed) {
  RecordTypeUnknow = 0,
  RecordTypeMp4 = 1,
  RecordTypeDav = 2,
};



SWIFT_CLASS("_TtC11DHMediaPlay15SipStreamCamera")
@interface SipStreamCamera : SipTalkBaseCamera
@property (nonatomic) NSInteger dpHandle;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// 对讲结果
/// <ul>
///   <li>
///     eTalkFailed: 对讲失败
///   </li>
///   <li>
///     eTalkSuccess: 对讲成功
///   </li>
///   <li>
///     eTalkAudioSessionId: 音频SessionId
///   </li>
///   <li>
///     eTalkAudioPort: 音频port
///   </li>
///   <li>
///     eTalkVideoSessionId: 视频SessionId
///   </li>
///   <li>
///     eTalkVideoPort: 视频port
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, TalkResultType, closed) {
  TalkResultTypeETalkFailed = 0,
  TalkResultTypeETalkSuccess = 1,
  TalkResultTypeETalkAudioSessionId = 2,
  TalkResultTypeETalkAudioPort = 3,
  TalkResultTypeETalkVideoSessionId = 4,
  TalkResultTypeETalkVideoPort = 5,
};

/// 窗口按钮点击事件类型
/// <ul>
///   <li>
///     add: 点击加号添加事件
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, WinControlType, closed) {
  WinControlTypeAdd = 0,
  WinControlTypeRefresh = 1,
  WinControlTypeReplay = 2,
  WinControlTypeLock = 3,
  WinControlTypeDeviceLock = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
